# ---------------------------------------------------------------
# Assembly language program that reads data from the switches
# and displays it on the LEDs.
# ---------------------------------------------------------------

.text

# define a macro to move a 32 bit address to a register

.macro MOVIA reg, addr
  movhi \reg, %hi(\addr)
  ori \reg, \reg, %lo(\addr)
.endm

# define constants
.equ Switches, 0x11020    #find the base address of Switches in the system.h file
.equ HEXs,     0x11000    #find the base address of HEX in the system.h file
.equ Buttons,  0x11010    #find the base address of Buttons in the system.h file

#Define the main program
.global main
main: 	#load r2 and r3 with the addresses
  #Assigning registers to addresses
  movia r2, Switches
  movia r3, Buttons
  movia r4, HEXs
  movia r5, hex_start

loop:
  ldb r6, 0(r5)          #Loading hex_val into register
  stbio r6, 0(r4)        #putting value onto HEX display
  ldbio r7, 0(r3)        #loading buttons
  andi  r7, r7, 0x02     #bit masking buttons
  bne r7, r0, loop       #If button is pressed, go to UPDATE
  call UPDATE
  br    loop

UPDATE:     #Handles updating HEX value
 ldbio r8, 0(r2)        #load switches
 andi r8, r8, 0x01      #bit masking switches
 beq r8, r0, SUB        #If zero, go to subtract

 movia r9, hex_end   #Else, uptick array
 subi r9, r9, 0x02
 addi r5, r5, 1
 bgt r5, r9, LIMIT
 br WAIT                #Go to the WAIT

SUB:
 movia r9, hex_start
 subi r5, r5, 1       #Else, downtick array
 blt r5, r9, LIMIT
 br WAIT

LIMIT:
 mov r5, r9
 br WAIT

WAIT:
  ldbio r7, 0(r3)        #loading buttons
  andi  r7, r7, 0x02     #bit masking buttons
  bne r7, r0, loop       #If button is released, go to loop
  br WAIT

.data
hex_start:
 .byte 0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x18, 0x27
hex_end:
.end

