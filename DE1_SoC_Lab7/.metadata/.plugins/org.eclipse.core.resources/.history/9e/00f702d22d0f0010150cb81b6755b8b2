#include <stdio.h>
#include "system.h"

// point to base addresses 
volatile unsigned char *pushButtonBase_ptr = (unsigned char *) PUSHBUTTON1_BASE;
volatile unsigned char *ledsBase_ptr       = (unsigned char *) LEDS_BASE;
volatile unsigned int *ramBase_ptr        = (unsigned int *) RAMINFR_BE_0_BASE;

int byte_ram_test(unsigned char addr, unsigned char write_data) {
   *ledsBase_ptr = 0x00
   *addr = write_data;
   
   if(write_data != *addr) {
      *ledsBase_ptr = 0xFF;
      printf("ERROR: Address: 0x%x Read: 0x%x Expected: 0x%x", addr, *(addr), write_data);
   }
   return(0);
}

int short_ram_test(unsigned short addr, unsigned short write_data) {
   *ledsBase_ptr = 0x00;
   *ledsBase_ptr = 0x00
   *(addr) = write_data;
   
   if(write_data != *(addr)) {
      *ledsBase_ptr = 0xFF;
      printf("ERROR: Address: 0x%x Read: 0x%x Expected: 0x%x", addr, *(addr), write_data);
   }
   return(0);
}

int int_ram_test(unsigned int addr, unsigned int write_data) {
   *ledsBase_ptr = 0x00;
   *ledsBase_ptr = 0x00
   *(addr) = write_data;
   
   if(write_data != *(addr)) {
      *ledsBase_ptr = 0xFF;
      printf("ERROR: Address: 0x%x Read: 0x%x Expected: 0x%x", addr, *(addr), write_data);
   }
   return(0);
}

int ram_test(unsigned char address, unsigned int testData, unsigned char ramSize) {
unsigned char testDataChar;
unsigned short testDataShort;
   switch (ramSize) {
      case 8:

    	 testDataChar = (unsigned char)testData;
         for(char i = 0; i < 0x3FFF; i ++) {
            byte_ram_test(address, testDataChar);
         }
      break;
      
      case 16:

		 testDataShort = (unsigned short)testData;
         for(short i = 0; i < 0x3FFF; i ++) {
            byte_ram_test(address, testDataShort);
         }
      break;
      
      case 32:
         for(int i = 0; i < 0x3FFF; i ++) {
            byte_ram_test(address, testData);
         }
      break;
      
      default:
         printf("ERROR: Invalid ramSize");
      break;
      
   }
   return(0);
}

int main(void) {

    ram_test(0,0x00,8);

    ram_test(0,0x1234,16);

    ram_test(0,0xABCDEF90,32);
	//int_ram_test(0x5000, 0x12345678, 0x12345678);
	return(0);
}
