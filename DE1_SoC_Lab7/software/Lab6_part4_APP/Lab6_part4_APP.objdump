
Lab6_part4_APP.elf:     file format elf32-littlenios2
Lab6_part4_APP.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004180

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00001ce8 memsz 0x00001ce8 flags r-x
    LOAD off    0x00002d08 vaddr 0x00005d08 paddr 0x00005fe8 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x000032c8 vaddr 0x000062c8 paddr 0x000062c8 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001a94  00004180  00004180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000f4  00005c14  00005c14  00002c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  00005d08  00005fe8  00002d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  000062c8  000062c8  000032c8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000063f0  000063f0  00002fe8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000598  00000000  00000000  00003010  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007c0a  00000000  00000000  000035a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002b1d  00000000  00000000  0000b1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002d42  00000000  00000000  0000dccf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000008c0  00000000  00000000  00010a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001c8c  00000000  00000000  000112d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002104  00000000  00000000  00012f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00015064  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000340  00000000  00000000  00015078  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00016d62  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00016d65  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00016d71  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00016d72  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00016d73  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00016d77  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00016d7b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00016d7f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00016d8a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00016d95  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00016da0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000020  00000000  00000000  00016dab  2**0
                  CONTENTS, READONLY
 29 .jdi          00005215  00000000  00000000  00016dcb  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00043038  00000000  00000000  0001bfe0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004180 l    d  .text	00000000 .text
00005c14 l    d  .rodata	00000000 .rodata
00005d08 l    d  .rwdata	00000000 .rwdata
000062c8 l    d  .bss	00000000 .bss
000063f0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab6_part4_APP_bsp//obj/HAL/src/crt0.o
000041b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Lab6_Part4_interrupts.c
000062d4 l     O .bss	00000001 done_flag
000062d5 l     O .bss	00000001 break_flag
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00004758 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00005d08 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
0000521c l     F .text	00000014 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00005de8 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00005498 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00005584 l     F .text	00000088 alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000062ec g     O .bss	00000004 alt_instruction_exception_handler
000051cc g     F .text	00000050 alt_main
000046a8 g     F .text	00000080 _puts_r
000062f0 g     O .bss	00000100 alt_irq
00005fe8 g       *ABS*	00000000 __flash_rwdata_start
0000465c g     F .text	0000004c printf
000062cc g     O .bss	00000004 ramBase_short_ptr
0000587c g     F .text	00000008 altera_nios2_gen2_irq_init
00004230 g     F .text	000000bc byte_ram_test
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
000043b8 g     F .text	000000cc int_ram_test
000062d8 g     O .bss	00000004 errno
000062e4 g     O .bss	00000004 alt_argv
0000dfbc g       *ABS*	00000000 _gp
00005e14 g     O .rwdata	00000180 alt_fd_list
00005884 g     F .text	00000074 alt_find_dev
0000560c g     F .text	00000074 alt_io_redirect
00004728 g     F .text	00000014 puts
00005510 g     F .text	00000074 alt_exception_cause_generated_bad_addr
000042ec g     F .text	000000cc short_ram_test
00005354 g     F .text	0000005c altera_avalon_jtag_uart_read
00004620 g     F .text	0000003c _printf_r
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004f14 g     F .text	00000064 .hidden __udivsi3
00005fd0 g     O .rwdata	00000004 alt_max_fd
00005fc4 g     O .rwdata	00000004 _global_impure_ptr
000063f0 g       *ABS*	00000000 __bss_end
00005084 g     F .text	00000068 alt_iic_isr_register
00004484 g     F .text	00000114 ram_test
0000506c g     F .text	00000018 alt_ic_irq_enabled
000062dc g     O .bss	00000004 alt_irq_active
000040fc g     F .exceptions	00000060 alt_irq_handler
00005f94 g     O .rwdata	00000028 alt_dev_null
00005494 g     F .text	00000004 alt_dcache_flush_all
00005fe8 g       *ABS*	00000000 __ram_rwdata_end
00005fd4 g     O .rwdata	00000008 alt_dev_list
00005230 g     F .text	000000d4 write
00005d08 g       *ABS*	00000000 __ram_rodata_end
00004f78 g     F .text	00000058 .hidden __umodsi3
000063f0 g       *ABS*	00000000 end
0000415c g     F .exceptions	00000024 alt_instruction_exception_entry
00008000 g       *ABS*	00000000 __alt_stack_pointer
000053b0 g     F .text	00000034 altera_avalon_jtag_uart_write
000047c4 g     F .text	0000052c ___vfprintf_internal_r
00005a70 g     F .text	00000190 __call_exitprocs
00004180 g     F .text	0000003c _start
00005324 g     F .text	00000010 alt_sys_init
00004fd0 g     F .text	00000028 .hidden __mulsi3
00005d08 g       *ABS*	00000000 __ram_rwdata_start
00005c14 g       *ABS*	00000000 __ram_rodata_start
00005fbc g     O .rwdata	00000004 pushButtonBase_ptr
00005334 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
0000599c g     F .text	00000084 alt_get_fd
000062d0 g     O .bss	00000004 ramBase_int_ptr
00005fc0 g     O .rwdata	00000004 ledsBase_ptr
00005a40 g     F .text	00000030 memcmp
000063f0 g       *ABS*	00000000 __alt_stack_base
000058f8 g     F .text	000000a4 alt_find_file
000054a0 g     F .text	0000006c alt_dev_llist_insert
00004d0c g     F .text	000000b8 __sfvwrite_small_dev
000062c8 g       *ABS*	00000000 __bss_start
00004598 g     F .text	00000088 main
000062e0 g     O .bss	00000004 alt_envp
00005344 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
00005fe4 g     O .rwdata	00000004 alt_errno
00004e1c g     F .text	00000084 .hidden __divsi3
00005c14 g       *ABS*	00000000 __flash_rodata_start
00005304 g     F .text	00000020 alt_irq_init
00005820 g     F .text	0000005c alt_release_fd
00004dc4 g     F .text	00000058 _write_r
00005fc8 g     O .rwdata	00000004 _impure_ptr
000062e8 g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
00005fdc g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
00004ff8 g     F .text	00000004 alt_ic_isr_register
000041bc g     F .text	00000074 push_isr
00005fe8 g       *ABS*	00000000 _edata
000063f0 g       *ABS*	00000000 _end
000062c8 g     O .bss	00000004 ramBase_char_ptr
00004180 g       *ABS*	00000000 __ram_exceptions_end
00005034 g     F .text	00000038 alt_ic_irq_disable
00005a20 g     F .text	00000020 exit
00004ea0 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
00005c00 g     F .text	00000014 _exit
0000473c g     F .text	0000001c strlen
00005680 g     F .text	000001a0 open
0000550c g     F .text	00000004 alt_icache_flush_all
00005fcc g     O .rwdata	00000004 alt_priority_mask
00004ffc g     F .text	00000038 alt_ic_irq_enable
00004cf0 g     F .text	0000001c __vfprintf_internal
000053e4 g     F .text	000000b0 close
000050ec g     F .text	000000e0 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08506014 	ori	at,at,16768
    jmp r1
    4008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    4044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040fc0 	call	40fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000706 	br	40a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    4094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    4098:	000415c0 	call	415c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    409c:	1000021e 	bne	r2,zero,40a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    40a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    40a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    40a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    40ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    40d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    40f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40f8:	ef80083a 	eret

000040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40fc:	defffe04 	addi	sp,sp,-8
    4100:	dfc00115 	stw	ra,4(sp)
    4104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    410c:	04000034 	movhi	r16,0
    4110:	8418bc04 	addi	r16,r16,25328

  active = alt_irq_pending ();

  do
  {
    i = 0;
    4114:	0005883a 	mov	r2,zero
    mask = 1;
    4118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    411c:	20ca703a 	and	r5,r4,r3
    4120:	28000b26 	beq	r5,zero,4150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    4124:	100490fa 	slli	r2,r2,3
    4128:	8085883a 	add	r2,r16,r2
    412c:	10c00017 	ldw	r3,0(r2)
    4130:	11000117 	ldw	r4,4(r2)
    4134:	183ee83a 	callr	r3
    4138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    413c:	203ff51e 	bne	r4,zero,4114 <_gp+0xffff6158>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    4140:	dfc00117 	ldw	ra,4(sp)
    4144:	dc000017 	ldw	r16,0(sp)
    4148:	dec00204 	addi	sp,sp,8
    414c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    4150:	18c7883a 	add	r3,r3,r3
      i++;
    4154:	10800044 	addi	r2,r2,1

    } while (1);
    4158:	003ff006 	br	411c <_gp+0xffff6160>

0000415c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    415c:	d0a0cc17 	ldw	r2,-31952(gp)
    4160:	10000426 	beq	r2,zero,4174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    4164:	200b883a 	mov	r5,r4
    4168:	000d883a 	mov	r6,zero
    416c:	013fffc4 	movi	r4,-1
    4170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    4174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    4178:	0005883a 	mov	r2,zero
    417c:	f800283a 	ret

Disassembly of section .text:

00004180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4184:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    418c:	d6b7ef14 	ori	gp,gp,57276
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4194:	1098b214 	ori	r2,r2,25288

    movhi r3, %hi(__bss_end)
    4198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    419c:	18d8fc14 	ori	r3,r3,25584

    beq r2, r3, 1f
    41a0:	10c00326 	beq	r2,r3,41b0 <_start+0x30>

0:
    stw zero, (r2)
    41a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    41a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    41ac:	10fffd36 	bltu	r2,r3,41a4 <_gp+0xffff61e8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    41b0:	00050ec0 	call	50ec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    41b4:	00051cc0 	call	51cc <alt_main>

000041b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    41b8:	003fff06 	br	41b8 <_gp+0xffff61fc>

000041bc <push_isr>:
/* Interrupt Service Routine                                                 */
/*   Determines what caused the interrupt and calls the appropriate          */
/*  subroutine.                                                              */
/*                                                                           */
/*****************************************************************************/
{
    41bc:	defffd04 	addi	sp,sp,-12
    41c0:	dfc00215 	stw	ra,8(sp)
    41c4:	df000115 	stw	fp,4(sp)
    41c8:	df000104 	addi	fp,sp,4
    41cc:	e13fff15 	stw	r4,-4(fp)
	*(pushButtonBase_ptr + 12) = 0x0;
    41d0:	d0a00017 	ldw	r2,-32768(gp)
    41d4:	10800304 	addi	r2,r2,12
    41d8:	10000005 	stb	zero,0(r2)
	//Mask logic for setting flags
	if (0 == *pushButtonBase_ptr) {
    41dc:	d0a00017 	ldw	r2,-32768(gp)
    41e0:	10800003 	ldbu	r2,0(r2)
    41e4:	10803fcc 	andi	r2,r2,255
    41e8:	10000b1e 	bne	r2,zero,4218 <push_isr+0x5c>
	   if (1 == done_flag){
    41ec:	d0a0c603 	ldbu	r2,-31976(gp)
    41f0:	10803fcc 	andi	r2,r2,255
    41f4:	10800058 	cmpnei	r2,r2,1
    41f8:	1000071e 	bne	r2,zero,4218 <push_isr+0x5c>
          *ledsBase_ptr = 0xCC;
    41fc:	d0a00117 	ldw	r2,-32764(gp)
    4200:	00fff304 	movi	r3,-52
    4204:	10c00005 	stb	r3,0(r2)
          printf("RAM TEST DONE\n");
    4208:	01000034 	movhi	r4,0
    420c:	21170504 	addi	r4,r4,23572
    4210:	00047280 	call	4728 <puts>
          while(1);
    4214:	003fff06 	br	4214 <_gp+0xffff6258>
	   }

    }
	return;
    4218:	0001883a 	nop

	//set flag that button was pressed
    //clear interrupt IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PUSHBUTTONS_BASE, 0);
}
    421c:	e037883a 	mov	sp,fp
    4220:	dfc00117 	ldw	ra,4(sp)
    4224:	df000017 	ldw	fp,0(sp)
    4228:	dec00204 	addi	sp,sp,8
    422c:	f800283a 	ret

00004230 <byte_ram_test>:

int byte_ram_test(unsigned int addr, unsigned char write_data) {
    4230:	defffc04 	addi	sp,sp,-16
    4234:	dfc00315 	stw	ra,12(sp)
    4238:	df000215 	stw	fp,8(sp)
    423c:	df000204 	addi	fp,sp,8
    4240:	e13ffe15 	stw	r4,-8(fp)
    4244:	2805883a 	mov	r2,r5
    4248:	e0bfff05 	stb	r2,-4(fp)
	if (addr == 0){
    424c:	e0bffe17 	ldw	r2,-8(fp)
    4250:	1000021e 	bne	r2,zero,425c <byte_ram_test+0x2c>
		*ledsBase_ptr = 0x00;
    4254:	d0a00117 	ldw	r2,-32764(gp)
    4258:	10000005 	stb	zero,0(r2)
	}
   *(ramBase_char_ptr + addr) = write_data;
    425c:	d0e0c317 	ldw	r3,-31988(gp)
    4260:	e0bffe17 	ldw	r2,-8(fp)
    4264:	1885883a 	add	r2,r3,r2
    4268:	e0ffff03 	ldbu	r3,-4(fp)
    426c:	10c00005 	stb	r3,0(r2)
   
   if(write_data != *(ramBase_char_ptr + addr)) {
    4270:	d0e0c317 	ldw	r3,-31988(gp)
    4274:	e0bffe17 	ldw	r2,-8(fp)
    4278:	1885883a 	add	r2,r3,r2
    427c:	10800003 	ldbu	r2,0(r2)
    4280:	10c03fcc 	andi	r3,r2,255
    4284:	e0bfff03 	ldbu	r2,-4(fp)
    4288:	18801226 	beq	r3,r2,42d4 <byte_ram_test+0xa4>
      *ledsBase_ptr = 0xFF;
    428c:	d0a00117 	ldw	r2,-32764(gp)
    4290:	00ffffc4 	movi	r3,-1
    4294:	10c00005 	stb	r3,0(r2)
      printf("ERROR: Address: 0x%08x Read: 0x%02x Expected: 0x%02x\n", (ramBase_char_ptr + addr), *(ramBase_char_ptr + addr), write_data);
    4298:	d0e0c317 	ldw	r3,-31988(gp)
    429c:	e0bffe17 	ldw	r2,-8(fp)
    42a0:	1889883a 	add	r4,r3,r2
    42a4:	d0e0c317 	ldw	r3,-31988(gp)
    42a8:	e0bffe17 	ldw	r2,-8(fp)
    42ac:	1885883a 	add	r2,r3,r2
    42b0:	10800003 	ldbu	r2,0(r2)
    42b4:	10803fcc 	andi	r2,r2,255
    42b8:	e0ffff03 	ldbu	r3,-4(fp)
    42bc:	180f883a 	mov	r7,r3
    42c0:	100d883a 	mov	r6,r2
    42c4:	200b883a 	mov	r5,r4
    42c8:	01000034 	movhi	r4,0
    42cc:	21170904 	addi	r4,r4,23588
    42d0:	000465c0 	call	465c <printf>
   }
   return(0);
    42d4:	0005883a 	mov	r2,zero
}
    42d8:	e037883a 	mov	sp,fp
    42dc:	dfc00117 	ldw	ra,4(sp)
    42e0:	df000017 	ldw	fp,0(sp)
    42e4:	dec00204 	addi	sp,sp,8
    42e8:	f800283a 	ret

000042ec <short_ram_test>:

int short_ram_test(unsigned int addr, unsigned short write_data) {
    42ec:	defffc04 	addi	sp,sp,-16
    42f0:	dfc00315 	stw	ra,12(sp)
    42f4:	df000215 	stw	fp,8(sp)
    42f8:	df000204 	addi	fp,sp,8
    42fc:	e13ffe15 	stw	r4,-8(fp)
    4300:	2805883a 	mov	r2,r5
    4304:	e0bfff0d 	sth	r2,-4(fp)
	if (addr == 0){
    4308:	e0bffe17 	ldw	r2,-8(fp)
    430c:	1000021e 	bne	r2,zero,4318 <short_ram_test+0x2c>
		*ledsBase_ptr = 0x00;
    4310:	d0a00117 	ldw	r2,-32764(gp)
    4314:	10000005 	stb	zero,0(r2)
	}
   *(ramBase_short_ptr + addr) = write_data;
    4318:	d0e0c417 	ldw	r3,-31984(gp)
    431c:	e0bffe17 	ldw	r2,-8(fp)
    4320:	1085883a 	add	r2,r2,r2
    4324:	1885883a 	add	r2,r3,r2
    4328:	e0ffff0b 	ldhu	r3,-4(fp)
    432c:	10c0000d 	sth	r3,0(r2)
   
   if(write_data != *(ramBase_short_ptr + addr)) {
    4330:	d0e0c417 	ldw	r3,-31984(gp)
    4334:	e0bffe17 	ldw	r2,-8(fp)
    4338:	1085883a 	add	r2,r2,r2
    433c:	1885883a 	add	r2,r3,r2
    4340:	1080000b 	ldhu	r2,0(r2)
    4344:	10ffffcc 	andi	r3,r2,65535
    4348:	e0bfff0b 	ldhu	r2,-4(fp)
    434c:	18801426 	beq	r3,r2,43a0 <short_ram_test+0xb4>
      *ledsBase_ptr = 0xFF;
    4350:	d0a00117 	ldw	r2,-32764(gp)
    4354:	00ffffc4 	movi	r3,-1
    4358:	10c00005 	stb	r3,0(r2)
      printf("ERROR: Address: 0x%08x Read: 0x%04x Expected: 0x%04x\n", (ramBase_short_ptr + addr), *(ramBase_short_ptr + addr), write_data);
    435c:	d0e0c417 	ldw	r3,-31984(gp)
    4360:	e0bffe17 	ldw	r2,-8(fp)
    4364:	1085883a 	add	r2,r2,r2
    4368:	1889883a 	add	r4,r3,r2
    436c:	d0e0c417 	ldw	r3,-31984(gp)
    4370:	e0bffe17 	ldw	r2,-8(fp)
    4374:	1085883a 	add	r2,r2,r2
    4378:	1885883a 	add	r2,r3,r2
    437c:	1080000b 	ldhu	r2,0(r2)
    4380:	10bfffcc 	andi	r2,r2,65535
    4384:	e0ffff0b 	ldhu	r3,-4(fp)
    4388:	180f883a 	mov	r7,r3
    438c:	100d883a 	mov	r6,r2
    4390:	200b883a 	mov	r5,r4
    4394:	01000034 	movhi	r4,0
    4398:	21171704 	addi	r4,r4,23644
    439c:	000465c0 	call	465c <printf>
   }
   return(0);
    43a0:	0005883a 	mov	r2,zero
}
    43a4:	e037883a 	mov	sp,fp
    43a8:	dfc00117 	ldw	ra,4(sp)
    43ac:	df000017 	ldw	fp,0(sp)
    43b0:	dec00204 	addi	sp,sp,8
    43b4:	f800283a 	ret

000043b8 <int_ram_test>:

int int_ram_test(unsigned int addr, unsigned int write_data) {
    43b8:	defffc04 	addi	sp,sp,-16
    43bc:	dfc00315 	stw	ra,12(sp)
    43c0:	df000215 	stw	fp,8(sp)
    43c4:	df000204 	addi	fp,sp,8
    43c8:	e13ffe15 	stw	r4,-8(fp)
    43cc:	e17fff15 	stw	r5,-4(fp)
	if (addr == 0){
    43d0:	e0bffe17 	ldw	r2,-8(fp)
    43d4:	1000021e 	bne	r2,zero,43e0 <int_ram_test+0x28>
		*ledsBase_ptr = 0x00;
    43d8:	d0a00117 	ldw	r2,-32764(gp)
    43dc:	10000005 	stb	zero,0(r2)
	}
   *(ramBase_int_ptr + addr) = write_data;
    43e0:	d0e0c517 	ldw	r3,-31980(gp)
    43e4:	e0bffe17 	ldw	r2,-8(fp)
    43e8:	1085883a 	add	r2,r2,r2
    43ec:	1085883a 	add	r2,r2,r2
    43f0:	1885883a 	add	r2,r3,r2
    43f4:	e0ffff17 	ldw	r3,-4(fp)
    43f8:	10c00015 	stw	r3,0(r2)
   
   if(write_data != *(ramBase_int_ptr + addr)) {
    43fc:	d0e0c517 	ldw	r3,-31980(gp)
    4400:	e0bffe17 	ldw	r2,-8(fp)
    4404:	1085883a 	add	r2,r2,r2
    4408:	1085883a 	add	r2,r2,r2
    440c:	1885883a 	add	r2,r3,r2
    4410:	10c00017 	ldw	r3,0(r2)
    4414:	e0bfff17 	ldw	r2,-4(fp)
    4418:	18801426 	beq	r3,r2,446c <int_ram_test+0xb4>
      *ledsBase_ptr = 0xFF;
    441c:	d0a00117 	ldw	r2,-32764(gp)
    4420:	00ffffc4 	movi	r3,-1
    4424:	10c00005 	stb	r3,0(r2)
      printf("ERROR: Address: 0x%08x Read: 0x%08x Expected: 0x%08x\n", (ramBase_int_ptr + addr), *(ramBase_int_ptr + addr), write_data);
    4428:	d0e0c517 	ldw	r3,-31980(gp)
    442c:	e0bffe17 	ldw	r2,-8(fp)
    4430:	1085883a 	add	r2,r2,r2
    4434:	1085883a 	add	r2,r2,r2
    4438:	1889883a 	add	r4,r3,r2
    443c:	d0e0c517 	ldw	r3,-31980(gp)
    4440:	e0bffe17 	ldw	r2,-8(fp)
    4444:	1085883a 	add	r2,r2,r2
    4448:	1085883a 	add	r2,r2,r2
    444c:	1885883a 	add	r2,r3,r2
    4450:	10800017 	ldw	r2,0(r2)
    4454:	e1ffff17 	ldw	r7,-4(fp)
    4458:	100d883a 	mov	r6,r2
    445c:	200b883a 	mov	r5,r4
    4460:	01000034 	movhi	r4,0
    4464:	21172504 	addi	r4,r4,23700
    4468:	000465c0 	call	465c <printf>
   }
   return(0);
    446c:	0005883a 	mov	r2,zero
}
    4470:	e037883a 	mov	sp,fp
    4474:	dfc00117 	ldw	ra,4(sp)
    4478:	df000017 	ldw	fp,0(sp)
    447c:	dec00204 	addi	sp,sp,8
    4480:	f800283a 	ret

00004484 <ram_test>:

int ram_test(unsigned int address, unsigned int testData, unsigned char ramSize) {
    4484:	defff704 	addi	sp,sp,-36
    4488:	dfc00815 	stw	ra,32(sp)
    448c:	df000715 	stw	fp,28(sp)
    4490:	df000704 	addi	fp,sp,28
    4494:	e13ffd15 	stw	r4,-12(fp)
    4498:	e17ffe15 	stw	r5,-8(fp)
    449c:	3005883a 	mov	r2,r6
    44a0:	e0bfff05 	stb	r2,-4(fp)
unsigned char testDataChar;
unsigned short testDataShort;
   switch (ramSize) {
    44a4:	e0bfff03 	ldbu	r2,-4(fp)
    44a8:	10c00420 	cmpeqi	r3,r2,16
    44ac:	1800131e 	bne	r3,zero,44fc <ram_test+0x78>
    44b0:	10c00820 	cmpeqi	r3,r2,32
    44b4:	1800211e 	bne	r3,zero,453c <ram_test+0xb8>
    44b8:	10800220 	cmpeqi	r2,r2,8
    44bc:	10002c26 	beq	r2,zero,4570 <ram_test+0xec>
      case 8:

    	 testDataChar = (unsigned char)testData;
    44c0:	e0bffe17 	ldw	r2,-8(fp)
    44c4:	e0bffc05 	stb	r2,-16(fp)

         for(unsigned int i = 0; i <= address; i ++) {
    44c8:	e03ff915 	stw	zero,-28(fp)
    44cc:	00000706 	br	44ec <ram_test+0x68>
            byte_ram_test(i, testDataChar);
    44d0:	e0bffc03 	ldbu	r2,-16(fp)
    44d4:	100b883a 	mov	r5,r2
    44d8:	e13ff917 	ldw	r4,-28(fp)
    44dc:	00042300 	call	4230 <byte_ram_test>
   switch (ramSize) {
      case 8:

    	 testDataChar = (unsigned char)testData;

         for(unsigned int i = 0; i <= address; i ++) {
    44e0:	e0bff917 	ldw	r2,-28(fp)
    44e4:	10800044 	addi	r2,r2,1
    44e8:	e0bff915 	stw	r2,-28(fp)
    44ec:	e0bff917 	ldw	r2,-28(fp)
    44f0:	e0fffd17 	ldw	r3,-12(fp)
    44f4:	18bff62e 	bgeu	r3,r2,44d0 <_gp+0xffff6514>
            byte_ram_test(i, testDataChar);
         }
      break;
    44f8:	00002106 	br	4580 <ram_test+0xfc>
      
      case 16:
		 testDataShort = (unsigned short)testData;
    44fc:	e0bffe17 	ldw	r2,-8(fp)
    4500:	e0bffc8d 	sth	r2,-14(fp)
         for(unsigned int i = 0; i <= (address/2); i ++) {
    4504:	e03ffa15 	stw	zero,-24(fp)
    4508:	00000706 	br	4528 <ram_test+0xa4>
            short_ram_test(i, testDataShort);
    450c:	e0bffc8b 	ldhu	r2,-14(fp)
    4510:	100b883a 	mov	r5,r2
    4514:	e13ffa17 	ldw	r4,-24(fp)
    4518:	00042ec0 	call	42ec <short_ram_test>
         }
      break;
      
      case 16:
		 testDataShort = (unsigned short)testData;
         for(unsigned int i = 0; i <= (address/2); i ++) {
    451c:	e0bffa17 	ldw	r2,-24(fp)
    4520:	10800044 	addi	r2,r2,1
    4524:	e0bffa15 	stw	r2,-24(fp)
    4528:	e0bffd17 	ldw	r2,-12(fp)
    452c:	1006d07a 	srli	r3,r2,1
    4530:	e0bffa17 	ldw	r2,-24(fp)
    4534:	18bff52e 	bgeu	r3,r2,450c <_gp+0xffff6550>
            short_ram_test(i, testDataShort);
         }
      break;
    4538:	00001106 	br	4580 <ram_test+0xfc>
      
      case 32:
         for(unsigned int i = 0; i <= (address/4); i ++) {
    453c:	e03ffb15 	stw	zero,-20(fp)
    4540:	00000606 	br	455c <ram_test+0xd8>
            int_ram_test(i, testData);
    4544:	e17ffe17 	ldw	r5,-8(fp)
    4548:	e13ffb17 	ldw	r4,-20(fp)
    454c:	00043b80 	call	43b8 <int_ram_test>
            short_ram_test(i, testDataShort);
         }
      break;
      
      case 32:
         for(unsigned int i = 0; i <= (address/4); i ++) {
    4550:	e0bffb17 	ldw	r2,-20(fp)
    4554:	10800044 	addi	r2,r2,1
    4558:	e0bffb15 	stw	r2,-20(fp)
    455c:	e0bffd17 	ldw	r2,-12(fp)
    4560:	1006d0ba 	srli	r3,r2,2
    4564:	e0bffb17 	ldw	r2,-20(fp)
    4568:	18bff62e 	bgeu	r3,r2,4544 <_gp+0xffff6588>
            int_ram_test(i, testData);
         }
      break;
    456c:	00000406 	br	4580 <ram_test+0xfc>
      
      default:
         printf("ERROR: Invalid ramSize\n");
    4570:	01000034 	movhi	r4,0
    4574:	21173304 	addi	r4,r4,23756
    4578:	00047280 	call	4728 <puts>
      break;
    457c:	0001883a 	nop
      
   }
   return(0);
    4580:	0005883a 	mov	r2,zero
}
    4584:	e037883a 	mov	sp,fp
    4588:	dfc00117 	ldw	ra,4(sp)
    458c:	df000017 	ldw	fp,0(sp)
    4590:	dec00204 	addi	sp,sp,8
    4594:	f800283a 	ret

00004598 <main>:

int main(void) {
    4598:	defffd04 	addi	sp,sp,-12
    459c:	dfc00215 	stw	ra,8(sp)
    45a0:	df000115 	stw	fp,4(sp)
    45a4:	df000104 	addi	fp,sp,4
    *(pushButtonBase_ptr + 8) = 0x1;
    45a8:	d0a00017 	ldw	r2,-32768(gp)
    45ac:	10800204 	addi	r2,r2,8
    45b0:	00c00044 	movi	r3,1
    45b4:	10c00005 	stb	r3,0(r2)
    *(pushButtonBase_ptr + 12) = 0x0;
    45b8:	d0a00017 	ldw	r2,-32768(gp)
    45bc:	10800304 	addi	r2,r2,12
    45c0:	10000005 	stb	zero,0(r2)
    alt_ic_isr_register(PUSHBUTTON1_IRQ_INTERRUPT_CONTROLLER_ID, PUSHBUTTON1_IRQ, push_isr, 0, 0);
    45c4:	d8000015 	stw	zero,0(sp)
    45c8:	000f883a 	mov	r7,zero
    45cc:	01800034 	movhi	r6,0
    45d0:	31906f04 	addi	r6,r6,16828
    45d4:	000b883a 	mov	r5,zero
    45d8:	0009883a 	mov	r4,zero
    45dc:	0004ff80 	call	4ff8 <alt_ic_isr_register>

    while(1) {
       ram_test(0x3FFF,0x00,8);
    45e0:	01800204 	movi	r6,8
    45e4:	000b883a 	mov	r5,zero
    45e8:	010fffc4 	movi	r4,16383
    45ec:	00044840 	call	4484 <ram_test>

       ram_test(0x3FFF,0x1234,16);
    45f0:	01800404 	movi	r6,16
    45f4:	01448d04 	movi	r5,4660
    45f8:	010fffc4 	movi	r4,16383
    45fc:	00044840 	call	4484 <ram_test>

       ram_test(0x3FFF,0xABCDEF90,32);
    4600:	01800804 	movi	r6,32
    4604:	016af3b4 	movhi	r5,43982
    4608:	297be404 	addi	r5,r5,-4208
    460c:	010fffc4 	movi	r4,16383
    4610:	00044840 	call	4484 <ram_test>
       done_flag = 1;
    4614:	00800044 	movi	r2,1
    4618:	d0a0c605 	stb	r2,-31976(gp)
    }
    461c:	003ff006 	br	45e0 <_gp+0xffff6624>

00004620 <_printf_r>:
    4620:	defffd04 	addi	sp,sp,-12
    4624:	dfc00015 	stw	ra,0(sp)
    4628:	d9800115 	stw	r6,4(sp)
    462c:	d9c00215 	stw	r7,8(sp)
    4630:	20c00217 	ldw	r3,8(r4)
    4634:	01800034 	movhi	r6,0
    4638:	31934304 	addi	r6,r6,19724
    463c:	19800115 	stw	r6,4(r3)
    4640:	280d883a 	mov	r6,r5
    4644:	21400217 	ldw	r5,8(r4)
    4648:	d9c00104 	addi	r7,sp,4
    464c:	00047c40 	call	47c4 <___vfprintf_internal_r>
    4650:	dfc00017 	ldw	ra,0(sp)
    4654:	dec00304 	addi	sp,sp,12
    4658:	f800283a 	ret

0000465c <printf>:
    465c:	defffc04 	addi	sp,sp,-16
    4660:	dfc00015 	stw	ra,0(sp)
    4664:	d9400115 	stw	r5,4(sp)
    4668:	d9800215 	stw	r6,8(sp)
    466c:	d9c00315 	stw	r7,12(sp)
    4670:	00800034 	movhi	r2,0
    4674:	1097f204 	addi	r2,r2,24520
    4678:	10800017 	ldw	r2,0(r2)
    467c:	01400034 	movhi	r5,0
    4680:	29534304 	addi	r5,r5,19724
    4684:	10c00217 	ldw	r3,8(r2)
    4688:	d9800104 	addi	r6,sp,4
    468c:	19400115 	stw	r5,4(r3)
    4690:	200b883a 	mov	r5,r4
    4694:	11000217 	ldw	r4,8(r2)
    4698:	0004cf00 	call	4cf0 <__vfprintf_internal>
    469c:	dfc00017 	ldw	ra,0(sp)
    46a0:	dec00404 	addi	sp,sp,16
    46a4:	f800283a 	ret

000046a8 <_puts_r>:
    46a8:	defffd04 	addi	sp,sp,-12
    46ac:	dc000015 	stw	r16,0(sp)
    46b0:	2021883a 	mov	r16,r4
    46b4:	2809883a 	mov	r4,r5
    46b8:	dfc00215 	stw	ra,8(sp)
    46bc:	dc400115 	stw	r17,4(sp)
    46c0:	2823883a 	mov	r17,r5
    46c4:	000473c0 	call	473c <strlen>
    46c8:	81400217 	ldw	r5,8(r16)
    46cc:	01000034 	movhi	r4,0
    46d0:	21134304 	addi	r4,r4,19724
    46d4:	29000115 	stw	r4,4(r5)
    46d8:	100f883a 	mov	r7,r2
    46dc:	880d883a 	mov	r6,r17
    46e0:	8009883a 	mov	r4,r16
    46e4:	0004d0c0 	call	4d0c <__sfvwrite_small_dev>
    46e8:	00ffffc4 	movi	r3,-1
    46ec:	10c00926 	beq	r2,r3,4714 <_puts_r+0x6c>
    46f0:	81400217 	ldw	r5,8(r16)
    46f4:	01800034 	movhi	r6,0
    46f8:	01c00044 	movi	r7,1
    46fc:	28800117 	ldw	r2,4(r5)
    4700:	31973904 	addi	r6,r6,23780
    4704:	8009883a 	mov	r4,r16
    4708:	103ee83a 	callr	r2
    470c:	10bfffe0 	cmpeqi	r2,r2,-1
    4710:	0085c83a 	sub	r2,zero,r2
    4714:	dfc00217 	ldw	ra,8(sp)
    4718:	dc400117 	ldw	r17,4(sp)
    471c:	dc000017 	ldw	r16,0(sp)
    4720:	dec00304 	addi	sp,sp,12
    4724:	f800283a 	ret

00004728 <puts>:
    4728:	00800034 	movhi	r2,0
    472c:	1097f204 	addi	r2,r2,24520
    4730:	200b883a 	mov	r5,r4
    4734:	11000017 	ldw	r4,0(r2)
    4738:	00046a81 	jmpi	46a8 <_puts_r>

0000473c <strlen>:
    473c:	2005883a 	mov	r2,r4
    4740:	10c00007 	ldb	r3,0(r2)
    4744:	18000226 	beq	r3,zero,4750 <strlen+0x14>
    4748:	10800044 	addi	r2,r2,1
    474c:	003ffc06 	br	4740 <_gp+0xffff6784>
    4750:	1105c83a 	sub	r2,r2,r4
    4754:	f800283a 	ret

00004758 <print_repeat>:
    4758:	defffb04 	addi	sp,sp,-20
    475c:	dc800315 	stw	r18,12(sp)
    4760:	dc400215 	stw	r17,8(sp)
    4764:	dc000115 	stw	r16,4(sp)
    4768:	dfc00415 	stw	ra,16(sp)
    476c:	2025883a 	mov	r18,r4
    4770:	2823883a 	mov	r17,r5
    4774:	d9800005 	stb	r6,0(sp)
    4778:	3821883a 	mov	r16,r7
    477c:	04000a0e 	bge	zero,r16,47a8 <print_repeat+0x50>
    4780:	88800117 	ldw	r2,4(r17)
    4784:	01c00044 	movi	r7,1
    4788:	d80d883a 	mov	r6,sp
    478c:	880b883a 	mov	r5,r17
    4790:	9009883a 	mov	r4,r18
    4794:	103ee83a 	callr	r2
    4798:	843fffc4 	addi	r16,r16,-1
    479c:	103ff726 	beq	r2,zero,477c <_gp+0xffff67c0>
    47a0:	00bfffc4 	movi	r2,-1
    47a4:	00000106 	br	47ac <print_repeat+0x54>
    47a8:	0005883a 	mov	r2,zero
    47ac:	dfc00417 	ldw	ra,16(sp)
    47b0:	dc800317 	ldw	r18,12(sp)
    47b4:	dc400217 	ldw	r17,8(sp)
    47b8:	dc000117 	ldw	r16,4(sp)
    47bc:	dec00504 	addi	sp,sp,20
    47c0:	f800283a 	ret

000047c4 <___vfprintf_internal_r>:
    47c4:	deffe504 	addi	sp,sp,-108
    47c8:	d8c00804 	addi	r3,sp,32
    47cc:	ddc01815 	stw	r23,96(sp)
    47d0:	dd801715 	stw	r22,92(sp)
    47d4:	dd401615 	stw	r21,88(sp)
    47d8:	dd001515 	stw	r20,84(sp)
    47dc:	dcc01415 	stw	r19,80(sp)
    47e0:	dc801315 	stw	r18,76(sp)
    47e4:	dc401215 	stw	r17,72(sp)
    47e8:	dc001115 	stw	r16,68(sp)
    47ec:	dfc01a15 	stw	ra,104(sp)
    47f0:	df001915 	stw	fp,100(sp)
    47f4:	2029883a 	mov	r20,r4
    47f8:	2823883a 	mov	r17,r5
    47fc:	382d883a 	mov	r22,r7
    4800:	d9800f15 	stw	r6,60(sp)
    4804:	0021883a 	mov	r16,zero
    4808:	d8000e15 	stw	zero,56(sp)
    480c:	d8000a15 	stw	zero,40(sp)
    4810:	002b883a 	mov	r21,zero
    4814:	0027883a 	mov	r19,zero
    4818:	0025883a 	mov	r18,zero
    481c:	d8000c15 	stw	zero,48(sp)
    4820:	d8000b15 	stw	zero,44(sp)
    4824:	002f883a 	mov	r23,zero
    4828:	d8c00915 	stw	r3,36(sp)
    482c:	d8c00f17 	ldw	r3,60(sp)
    4830:	19000003 	ldbu	r4,0(r3)
    4834:	20803fcc 	andi	r2,r4,255
    4838:	1080201c 	xori	r2,r2,128
    483c:	10bfe004 	addi	r2,r2,-128
    4840:	10011e26 	beq	r2,zero,4cbc <___vfprintf_internal_r+0x4f8>
    4844:	00c00044 	movi	r3,1
    4848:	b8c01426 	beq	r23,r3,489c <___vfprintf_internal_r+0xd8>
    484c:	1dc00216 	blt	r3,r23,4858 <___vfprintf_internal_r+0x94>
    4850:	b8000626 	beq	r23,zero,486c <___vfprintf_internal_r+0xa8>
    4854:	00011506 	br	4cac <___vfprintf_internal_r+0x4e8>
    4858:	01400084 	movi	r5,2
    485c:	b9401d26 	beq	r23,r5,48d4 <___vfprintf_internal_r+0x110>
    4860:	014000c4 	movi	r5,3
    4864:	b9402b26 	beq	r23,r5,4914 <___vfprintf_internal_r+0x150>
    4868:	00011006 	br	4cac <___vfprintf_internal_r+0x4e8>
    486c:	01400944 	movi	r5,37
    4870:	1140fc26 	beq	r2,r5,4c64 <___vfprintf_internal_r+0x4a0>
    4874:	88800117 	ldw	r2,4(r17)
    4878:	d9000005 	stb	r4,0(sp)
    487c:	01c00044 	movi	r7,1
    4880:	d80d883a 	mov	r6,sp
    4884:	880b883a 	mov	r5,r17
    4888:	a009883a 	mov	r4,r20
    488c:	103ee83a 	callr	r2
    4890:	1000d81e 	bne	r2,zero,4bf4 <___vfprintf_internal_r+0x430>
    4894:	84000044 	addi	r16,r16,1
    4898:	00010406 	br	4cac <___vfprintf_internal_r+0x4e8>
    489c:	01400c04 	movi	r5,48
    48a0:	1140fa26 	beq	r2,r5,4c8c <___vfprintf_internal_r+0x4c8>
    48a4:	01400944 	movi	r5,37
    48a8:	11400a1e 	bne	r2,r5,48d4 <___vfprintf_internal_r+0x110>
    48ac:	d8800005 	stb	r2,0(sp)
    48b0:	88800117 	ldw	r2,4(r17)
    48b4:	b80f883a 	mov	r7,r23
    48b8:	d80d883a 	mov	r6,sp
    48bc:	880b883a 	mov	r5,r17
    48c0:	a009883a 	mov	r4,r20
    48c4:	103ee83a 	callr	r2
    48c8:	1000ca1e 	bne	r2,zero,4bf4 <___vfprintf_internal_r+0x430>
    48cc:	84000044 	addi	r16,r16,1
    48d0:	0000f506 	br	4ca8 <___vfprintf_internal_r+0x4e4>
    48d4:	25fff404 	addi	r23,r4,-48
    48d8:	bdc03fcc 	andi	r23,r23,255
    48dc:	00c00244 	movi	r3,9
    48e0:	1dc00936 	bltu	r3,r23,4908 <___vfprintf_internal_r+0x144>
    48e4:	00bfffc4 	movi	r2,-1
    48e8:	90800426 	beq	r18,r2,48fc <___vfprintf_internal_r+0x138>
    48ec:	01400284 	movi	r5,10
    48f0:	9009883a 	mov	r4,r18
    48f4:	0004fd00 	call	4fd0 <__mulsi3>
    48f8:	00000106 	br	4900 <___vfprintf_internal_r+0x13c>
    48fc:	0005883a 	mov	r2,zero
    4900:	b8a5883a 	add	r18,r23,r2
    4904:	0000e206 	br	4c90 <___vfprintf_internal_r+0x4cc>
    4908:	01400b84 	movi	r5,46
    490c:	1140e426 	beq	r2,r5,4ca0 <___vfprintf_internal_r+0x4dc>
    4910:	05c00084 	movi	r23,2
    4914:	213ff404 	addi	r4,r4,-48
    4918:	27003fcc 	andi	fp,r4,255
    491c:	00c00244 	movi	r3,9
    4920:	1f000936 	bltu	r3,fp,4948 <___vfprintf_internal_r+0x184>
    4924:	00bfffc4 	movi	r2,-1
    4928:	98800426 	beq	r19,r2,493c <___vfprintf_internal_r+0x178>
    492c:	01400284 	movi	r5,10
    4930:	9809883a 	mov	r4,r19
    4934:	0004fd00 	call	4fd0 <__mulsi3>
    4938:	00000106 	br	4940 <___vfprintf_internal_r+0x17c>
    493c:	0005883a 	mov	r2,zero
    4940:	e0a7883a 	add	r19,fp,r2
    4944:	0000d906 	br	4cac <___vfprintf_internal_r+0x4e8>
    4948:	00c01b04 	movi	r3,108
    494c:	10c0d226 	beq	r2,r3,4c98 <___vfprintf_internal_r+0x4d4>
    4950:	013fffc4 	movi	r4,-1
    4954:	99000226 	beq	r19,r4,4960 <___vfprintf_internal_r+0x19c>
    4958:	d8000b15 	stw	zero,44(sp)
    495c:	00000106 	br	4964 <___vfprintf_internal_r+0x1a0>
    4960:	04c00044 	movi	r19,1
    4964:	01001a44 	movi	r4,105
    4968:	11001626 	beq	r2,r4,49c4 <___vfprintf_internal_r+0x200>
    496c:	20800916 	blt	r4,r2,4994 <___vfprintf_internal_r+0x1d0>
    4970:	010018c4 	movi	r4,99
    4974:	11008826 	beq	r2,r4,4b98 <___vfprintf_internal_r+0x3d4>
    4978:	01001904 	movi	r4,100
    497c:	11001126 	beq	r2,r4,49c4 <___vfprintf_internal_r+0x200>
    4980:	01001604 	movi	r4,88
    4984:	1100c81e 	bne	r2,r4,4ca8 <___vfprintf_internal_r+0x4e4>
    4988:	00c00044 	movi	r3,1
    498c:	d8c00e15 	stw	r3,56(sp)
    4990:	00001506 	br	49e8 <___vfprintf_internal_r+0x224>
    4994:	01001cc4 	movi	r4,115
    4998:	11009826 	beq	r2,r4,4bfc <___vfprintf_internal_r+0x438>
    499c:	20800416 	blt	r4,r2,49b0 <___vfprintf_internal_r+0x1ec>
    49a0:	01001bc4 	movi	r4,111
    49a4:	1100c01e 	bne	r2,r4,4ca8 <___vfprintf_internal_r+0x4e4>
    49a8:	05400204 	movi	r21,8
    49ac:	00000f06 	br	49ec <___vfprintf_internal_r+0x228>
    49b0:	01001d44 	movi	r4,117
    49b4:	11000d26 	beq	r2,r4,49ec <___vfprintf_internal_r+0x228>
    49b8:	01001e04 	movi	r4,120
    49bc:	11000a26 	beq	r2,r4,49e8 <___vfprintf_internal_r+0x224>
    49c0:	0000b906 	br	4ca8 <___vfprintf_internal_r+0x4e4>
    49c4:	d8c00a17 	ldw	r3,40(sp)
    49c8:	b7000104 	addi	fp,r22,4
    49cc:	18000726 	beq	r3,zero,49ec <___vfprintf_internal_r+0x228>
    49d0:	df000d15 	stw	fp,52(sp)
    49d4:	b5c00017 	ldw	r23,0(r22)
    49d8:	b800080e 	bge	r23,zero,49fc <___vfprintf_internal_r+0x238>
    49dc:	05efc83a 	sub	r23,zero,r23
    49e0:	02400044 	movi	r9,1
    49e4:	00000606 	br	4a00 <___vfprintf_internal_r+0x23c>
    49e8:	05400404 	movi	r21,16
    49ec:	b0c00104 	addi	r3,r22,4
    49f0:	d8c00d15 	stw	r3,52(sp)
    49f4:	b5c00017 	ldw	r23,0(r22)
    49f8:	d8000a15 	stw	zero,40(sp)
    49fc:	0013883a 	mov	r9,zero
    4a00:	d839883a 	mov	fp,sp
    4a04:	b8001726 	beq	r23,zero,4a64 <___vfprintf_internal_r+0x2a0>
    4a08:	a80b883a 	mov	r5,r21
    4a0c:	b809883a 	mov	r4,r23
    4a10:	da401015 	stw	r9,64(sp)
    4a14:	0004f140 	call	4f14 <__udivsi3>
    4a18:	a80b883a 	mov	r5,r21
    4a1c:	1009883a 	mov	r4,r2
    4a20:	102d883a 	mov	r22,r2
    4a24:	0004fd00 	call	4fd0 <__mulsi3>
    4a28:	b885c83a 	sub	r2,r23,r2
    4a2c:	00c00244 	movi	r3,9
    4a30:	da401017 	ldw	r9,64(sp)
    4a34:	18800216 	blt	r3,r2,4a40 <___vfprintf_internal_r+0x27c>
    4a38:	10800c04 	addi	r2,r2,48
    4a3c:	00000506 	br	4a54 <___vfprintf_internal_r+0x290>
    4a40:	d8c00e17 	ldw	r3,56(sp)
    4a44:	18000226 	beq	r3,zero,4a50 <___vfprintf_internal_r+0x28c>
    4a48:	10800dc4 	addi	r2,r2,55
    4a4c:	00000106 	br	4a54 <___vfprintf_internal_r+0x290>
    4a50:	108015c4 	addi	r2,r2,87
    4a54:	e0800005 	stb	r2,0(fp)
    4a58:	b02f883a 	mov	r23,r22
    4a5c:	e7000044 	addi	fp,fp,1
    4a60:	003fe806 	br	4a04 <_gp+0xffff6a48>
    4a64:	e6efc83a 	sub	r23,fp,sp
    4a68:	9dc5c83a 	sub	r2,r19,r23
    4a6c:	0080090e 	bge	zero,r2,4a94 <___vfprintf_internal_r+0x2d0>
    4a70:	e085883a 	add	r2,fp,r2
    4a74:	01400c04 	movi	r5,48
    4a78:	d8c00917 	ldw	r3,36(sp)
    4a7c:	e009883a 	mov	r4,fp
    4a80:	e0c0032e 	bgeu	fp,r3,4a90 <___vfprintf_internal_r+0x2cc>
    4a84:	e7000044 	addi	fp,fp,1
    4a88:	21400005 	stb	r5,0(r4)
    4a8c:	e0bffa1e 	bne	fp,r2,4a78 <_gp+0xffff6abc>
    4a90:	e6efc83a 	sub	r23,fp,sp
    4a94:	d8c00b17 	ldw	r3,44(sp)
    4a98:	4dd1883a 	add	r8,r9,r23
    4a9c:	922dc83a 	sub	r22,r18,r8
    4aa0:	18001626 	beq	r3,zero,4afc <___vfprintf_internal_r+0x338>
    4aa4:	48000a26 	beq	r9,zero,4ad0 <___vfprintf_internal_r+0x30c>
    4aa8:	00800b44 	movi	r2,45
    4aac:	d8800805 	stb	r2,32(sp)
    4ab0:	88800117 	ldw	r2,4(r17)
    4ab4:	01c00044 	movi	r7,1
    4ab8:	d9800804 	addi	r6,sp,32
    4abc:	880b883a 	mov	r5,r17
    4ac0:	a009883a 	mov	r4,r20
    4ac4:	103ee83a 	callr	r2
    4ac8:	10004a1e 	bne	r2,zero,4bf4 <___vfprintf_internal_r+0x430>
    4acc:	84000044 	addi	r16,r16,1
    4ad0:	0580070e 	bge	zero,r22,4af0 <___vfprintf_internal_r+0x32c>
    4ad4:	b00f883a 	mov	r7,r22
    4ad8:	01800c04 	movi	r6,48
    4adc:	880b883a 	mov	r5,r17
    4ae0:	a009883a 	mov	r4,r20
    4ae4:	00047580 	call	4758 <print_repeat>
    4ae8:	1000421e 	bne	r2,zero,4bf4 <___vfprintf_internal_r+0x430>
    4aec:	85a1883a 	add	r16,r16,r22
    4af0:	e02d883a 	mov	r22,fp
    4af4:	bf2fc83a 	sub	r23,r23,fp
    4af8:	00002006 	br	4b7c <___vfprintf_internal_r+0x3b8>
    4afc:	0580090e 	bge	zero,r22,4b24 <___vfprintf_internal_r+0x360>
    4b00:	b00f883a 	mov	r7,r22
    4b04:	01800804 	movi	r6,32
    4b08:	880b883a 	mov	r5,r17
    4b0c:	a009883a 	mov	r4,r20
    4b10:	da401015 	stw	r9,64(sp)
    4b14:	00047580 	call	4758 <print_repeat>
    4b18:	da401017 	ldw	r9,64(sp)
    4b1c:	1000351e 	bne	r2,zero,4bf4 <___vfprintf_internal_r+0x430>
    4b20:	85a1883a 	add	r16,r16,r22
    4b24:	483ff226 	beq	r9,zero,4af0 <_gp+0xffff6b34>
    4b28:	00800b44 	movi	r2,45
    4b2c:	d8800805 	stb	r2,32(sp)
    4b30:	88800117 	ldw	r2,4(r17)
    4b34:	01c00044 	movi	r7,1
    4b38:	d9800804 	addi	r6,sp,32
    4b3c:	880b883a 	mov	r5,r17
    4b40:	a009883a 	mov	r4,r20
    4b44:	103ee83a 	callr	r2
    4b48:	10002a1e 	bne	r2,zero,4bf4 <___vfprintf_internal_r+0x430>
    4b4c:	84000044 	addi	r16,r16,1
    4b50:	003fe706 	br	4af0 <_gp+0xffff6b34>
    4b54:	b5bfffc4 	addi	r22,r22,-1
    4b58:	b0800003 	ldbu	r2,0(r22)
    4b5c:	01c00044 	movi	r7,1
    4b60:	d9800804 	addi	r6,sp,32
    4b64:	d8800805 	stb	r2,32(sp)
    4b68:	88800117 	ldw	r2,4(r17)
    4b6c:	880b883a 	mov	r5,r17
    4b70:	a009883a 	mov	r4,r20
    4b74:	103ee83a 	callr	r2
    4b78:	10001e1e 	bne	r2,zero,4bf4 <___vfprintf_internal_r+0x430>
    4b7c:	8585c83a 	sub	r2,r16,r22
    4b80:	b5c9883a 	add	r4,r22,r23
    4b84:	e085883a 	add	r2,fp,r2
    4b88:	013ff216 	blt	zero,r4,4b54 <_gp+0xffff6b98>
    4b8c:	1021883a 	mov	r16,r2
    4b90:	dd800d17 	ldw	r22,52(sp)
    4b94:	00004406 	br	4ca8 <___vfprintf_internal_r+0x4e4>
    4b98:	00800044 	movi	r2,1
    4b9c:	1480080e 	bge	r2,r18,4bc0 <___vfprintf_internal_r+0x3fc>
    4ba0:	95ffffc4 	addi	r23,r18,-1
    4ba4:	b80f883a 	mov	r7,r23
    4ba8:	01800804 	movi	r6,32
    4bac:	880b883a 	mov	r5,r17
    4bb0:	a009883a 	mov	r4,r20
    4bb4:	00047580 	call	4758 <print_repeat>
    4bb8:	10000e1e 	bne	r2,zero,4bf4 <___vfprintf_internal_r+0x430>
    4bbc:	85e1883a 	add	r16,r16,r23
    4bc0:	b0800017 	ldw	r2,0(r22)
    4bc4:	01c00044 	movi	r7,1
    4bc8:	d80d883a 	mov	r6,sp
    4bcc:	d8800005 	stb	r2,0(sp)
    4bd0:	88800117 	ldw	r2,4(r17)
    4bd4:	880b883a 	mov	r5,r17
    4bd8:	a009883a 	mov	r4,r20
    4bdc:	b5c00104 	addi	r23,r22,4
    4be0:	103ee83a 	callr	r2
    4be4:	1000031e 	bne	r2,zero,4bf4 <___vfprintf_internal_r+0x430>
    4be8:	84000044 	addi	r16,r16,1
    4bec:	b82d883a 	mov	r22,r23
    4bf0:	00002d06 	br	4ca8 <___vfprintf_internal_r+0x4e4>
    4bf4:	00bfffc4 	movi	r2,-1
    4bf8:	00003106 	br	4cc0 <___vfprintf_internal_r+0x4fc>
    4bfc:	b5c00017 	ldw	r23,0(r22)
    4c00:	b7000104 	addi	fp,r22,4
    4c04:	b809883a 	mov	r4,r23
    4c08:	000473c0 	call	473c <strlen>
    4c0c:	9091c83a 	sub	r8,r18,r2
    4c10:	102d883a 	mov	r22,r2
    4c14:	0200090e 	bge	zero,r8,4c3c <___vfprintf_internal_r+0x478>
    4c18:	400f883a 	mov	r7,r8
    4c1c:	01800804 	movi	r6,32
    4c20:	880b883a 	mov	r5,r17
    4c24:	a009883a 	mov	r4,r20
    4c28:	da001015 	stw	r8,64(sp)
    4c2c:	00047580 	call	4758 <print_repeat>
    4c30:	da001017 	ldw	r8,64(sp)
    4c34:	103fef1e 	bne	r2,zero,4bf4 <_gp+0xffff6c38>
    4c38:	8221883a 	add	r16,r16,r8
    4c3c:	88800117 	ldw	r2,4(r17)
    4c40:	b00f883a 	mov	r7,r22
    4c44:	b80d883a 	mov	r6,r23
    4c48:	880b883a 	mov	r5,r17
    4c4c:	a009883a 	mov	r4,r20
    4c50:	103ee83a 	callr	r2
    4c54:	103fe71e 	bne	r2,zero,4bf4 <_gp+0xffff6c38>
    4c58:	85a1883a 	add	r16,r16,r22
    4c5c:	e02d883a 	mov	r22,fp
    4c60:	00001106 	br	4ca8 <___vfprintf_internal_r+0x4e4>
    4c64:	00c00044 	movi	r3,1
    4c68:	04ffffc4 	movi	r19,-1
    4c6c:	d8000e15 	stw	zero,56(sp)
    4c70:	d8c00a15 	stw	r3,40(sp)
    4c74:	05400284 	movi	r21,10
    4c78:	9825883a 	mov	r18,r19
    4c7c:	d8000c15 	stw	zero,48(sp)
    4c80:	d8000b15 	stw	zero,44(sp)
    4c84:	182f883a 	mov	r23,r3
    4c88:	00000806 	br	4cac <___vfprintf_internal_r+0x4e8>
    4c8c:	ddc00b15 	stw	r23,44(sp)
    4c90:	05c00084 	movi	r23,2
    4c94:	00000506 	br	4cac <___vfprintf_internal_r+0x4e8>
    4c98:	00c00044 	movi	r3,1
    4c9c:	d8c00c15 	stw	r3,48(sp)
    4ca0:	05c000c4 	movi	r23,3
    4ca4:	00000106 	br	4cac <___vfprintf_internal_r+0x4e8>
    4ca8:	002f883a 	mov	r23,zero
    4cac:	d8c00f17 	ldw	r3,60(sp)
    4cb0:	18c00044 	addi	r3,r3,1
    4cb4:	d8c00f15 	stw	r3,60(sp)
    4cb8:	003edc06 	br	482c <_gp+0xffff6870>
    4cbc:	8005883a 	mov	r2,r16
    4cc0:	dfc01a17 	ldw	ra,104(sp)
    4cc4:	df001917 	ldw	fp,100(sp)
    4cc8:	ddc01817 	ldw	r23,96(sp)
    4ccc:	dd801717 	ldw	r22,92(sp)
    4cd0:	dd401617 	ldw	r21,88(sp)
    4cd4:	dd001517 	ldw	r20,84(sp)
    4cd8:	dcc01417 	ldw	r19,80(sp)
    4cdc:	dc801317 	ldw	r18,76(sp)
    4ce0:	dc401217 	ldw	r17,72(sp)
    4ce4:	dc001117 	ldw	r16,68(sp)
    4ce8:	dec01b04 	addi	sp,sp,108
    4cec:	f800283a 	ret

00004cf0 <__vfprintf_internal>:
    4cf0:	00800034 	movhi	r2,0
    4cf4:	1097f204 	addi	r2,r2,24520
    4cf8:	300f883a 	mov	r7,r6
    4cfc:	280d883a 	mov	r6,r5
    4d00:	200b883a 	mov	r5,r4
    4d04:	11000017 	ldw	r4,0(r2)
    4d08:	00047c41 	jmpi	47c4 <___vfprintf_internal_r>

00004d0c <__sfvwrite_small_dev>:
    4d0c:	2880000b 	ldhu	r2,0(r5)
    4d10:	1080020c 	andi	r2,r2,8
    4d14:	10002126 	beq	r2,zero,4d9c <__sfvwrite_small_dev+0x90>
    4d18:	2880008f 	ldh	r2,2(r5)
    4d1c:	defffa04 	addi	sp,sp,-24
    4d20:	dc000015 	stw	r16,0(sp)
    4d24:	dfc00515 	stw	ra,20(sp)
    4d28:	dd000415 	stw	r20,16(sp)
    4d2c:	dcc00315 	stw	r19,12(sp)
    4d30:	dc800215 	stw	r18,8(sp)
    4d34:	dc400115 	stw	r17,4(sp)
    4d38:	2821883a 	mov	r16,r5
    4d3c:	10001216 	blt	r2,zero,4d88 <__sfvwrite_small_dev+0x7c>
    4d40:	2027883a 	mov	r19,r4
    4d44:	3025883a 	mov	r18,r6
    4d48:	3823883a 	mov	r17,r7
    4d4c:	05010004 	movi	r20,1024
    4d50:	04400b0e 	bge	zero,r17,4d80 <__sfvwrite_small_dev+0x74>
    4d54:	880f883a 	mov	r7,r17
    4d58:	a440010e 	bge	r20,r17,4d60 <__sfvwrite_small_dev+0x54>
    4d5c:	01c10004 	movi	r7,1024
    4d60:	8140008f 	ldh	r5,2(r16)
    4d64:	900d883a 	mov	r6,r18
    4d68:	9809883a 	mov	r4,r19
    4d6c:	0004dc40 	call	4dc4 <_write_r>
    4d70:	0080050e 	bge	zero,r2,4d88 <__sfvwrite_small_dev+0x7c>
    4d74:	88a3c83a 	sub	r17,r17,r2
    4d78:	90a5883a 	add	r18,r18,r2
    4d7c:	003ff406 	br	4d50 <_gp+0xffff6d94>
    4d80:	0005883a 	mov	r2,zero
    4d84:	00000706 	br	4da4 <__sfvwrite_small_dev+0x98>
    4d88:	8080000b 	ldhu	r2,0(r16)
    4d8c:	10801014 	ori	r2,r2,64
    4d90:	8080000d 	sth	r2,0(r16)
    4d94:	00bfffc4 	movi	r2,-1
    4d98:	00000206 	br	4da4 <__sfvwrite_small_dev+0x98>
    4d9c:	00bfffc4 	movi	r2,-1
    4da0:	f800283a 	ret
    4da4:	dfc00517 	ldw	ra,20(sp)
    4da8:	dd000417 	ldw	r20,16(sp)
    4dac:	dcc00317 	ldw	r19,12(sp)
    4db0:	dc800217 	ldw	r18,8(sp)
    4db4:	dc400117 	ldw	r17,4(sp)
    4db8:	dc000017 	ldw	r16,0(sp)
    4dbc:	dec00604 	addi	sp,sp,24
    4dc0:	f800283a 	ret

00004dc4 <_write_r>:
    4dc4:	defffd04 	addi	sp,sp,-12
    4dc8:	dc000015 	stw	r16,0(sp)
    4dcc:	04000034 	movhi	r16,0
    4dd0:	dc400115 	stw	r17,4(sp)
    4dd4:	8418b604 	addi	r16,r16,25304
    4dd8:	2023883a 	mov	r17,r4
    4ddc:	2809883a 	mov	r4,r5
    4de0:	300b883a 	mov	r5,r6
    4de4:	380d883a 	mov	r6,r7
    4de8:	dfc00215 	stw	ra,8(sp)
    4dec:	80000015 	stw	zero,0(r16)
    4df0:	00052300 	call	5230 <write>
    4df4:	00ffffc4 	movi	r3,-1
    4df8:	10c0031e 	bne	r2,r3,4e08 <_write_r+0x44>
    4dfc:	80c00017 	ldw	r3,0(r16)
    4e00:	18000126 	beq	r3,zero,4e08 <_write_r+0x44>
    4e04:	88c00015 	stw	r3,0(r17)
    4e08:	dfc00217 	ldw	ra,8(sp)
    4e0c:	dc400117 	ldw	r17,4(sp)
    4e10:	dc000017 	ldw	r16,0(sp)
    4e14:	dec00304 	addi	sp,sp,12
    4e18:	f800283a 	ret

00004e1c <__divsi3>:
    4e1c:	20001b16 	blt	r4,zero,4e8c <__divsi3+0x70>
    4e20:	000f883a 	mov	r7,zero
    4e24:	28001616 	blt	r5,zero,4e80 <__divsi3+0x64>
    4e28:	200d883a 	mov	r6,r4
    4e2c:	29001a2e 	bgeu	r5,r4,4e98 <__divsi3+0x7c>
    4e30:	00800804 	movi	r2,32
    4e34:	00c00044 	movi	r3,1
    4e38:	00000106 	br	4e40 <__divsi3+0x24>
    4e3c:	10000d26 	beq	r2,zero,4e74 <__divsi3+0x58>
    4e40:	294b883a 	add	r5,r5,r5
    4e44:	10bfffc4 	addi	r2,r2,-1
    4e48:	18c7883a 	add	r3,r3,r3
    4e4c:	293ffb36 	bltu	r5,r4,4e3c <_gp+0xffff6e80>
    4e50:	0005883a 	mov	r2,zero
    4e54:	18000726 	beq	r3,zero,4e74 <__divsi3+0x58>
    4e58:	0005883a 	mov	r2,zero
    4e5c:	31400236 	bltu	r6,r5,4e68 <__divsi3+0x4c>
    4e60:	314dc83a 	sub	r6,r6,r5
    4e64:	10c4b03a 	or	r2,r2,r3
    4e68:	1806d07a 	srli	r3,r3,1
    4e6c:	280ad07a 	srli	r5,r5,1
    4e70:	183ffa1e 	bne	r3,zero,4e5c <_gp+0xffff6ea0>
    4e74:	38000126 	beq	r7,zero,4e7c <__divsi3+0x60>
    4e78:	0085c83a 	sub	r2,zero,r2
    4e7c:	f800283a 	ret
    4e80:	014bc83a 	sub	r5,zero,r5
    4e84:	39c0005c 	xori	r7,r7,1
    4e88:	003fe706 	br	4e28 <_gp+0xffff6e6c>
    4e8c:	0109c83a 	sub	r4,zero,r4
    4e90:	01c00044 	movi	r7,1
    4e94:	003fe306 	br	4e24 <_gp+0xffff6e68>
    4e98:	00c00044 	movi	r3,1
    4e9c:	003fee06 	br	4e58 <_gp+0xffff6e9c>

00004ea0 <__modsi3>:
    4ea0:	20001716 	blt	r4,zero,4f00 <__modsi3+0x60>
    4ea4:	000f883a 	mov	r7,zero
    4ea8:	2005883a 	mov	r2,r4
    4eac:	28001216 	blt	r5,zero,4ef8 <__modsi3+0x58>
    4eb0:	2900162e 	bgeu	r5,r4,4f0c <__modsi3+0x6c>
    4eb4:	01800804 	movi	r6,32
    4eb8:	00c00044 	movi	r3,1
    4ebc:	00000106 	br	4ec4 <__modsi3+0x24>
    4ec0:	30000a26 	beq	r6,zero,4eec <__modsi3+0x4c>
    4ec4:	294b883a 	add	r5,r5,r5
    4ec8:	31bfffc4 	addi	r6,r6,-1
    4ecc:	18c7883a 	add	r3,r3,r3
    4ed0:	293ffb36 	bltu	r5,r4,4ec0 <_gp+0xffff6f04>
    4ed4:	18000526 	beq	r3,zero,4eec <__modsi3+0x4c>
    4ed8:	1806d07a 	srli	r3,r3,1
    4edc:	11400136 	bltu	r2,r5,4ee4 <__modsi3+0x44>
    4ee0:	1145c83a 	sub	r2,r2,r5
    4ee4:	280ad07a 	srli	r5,r5,1
    4ee8:	183ffb1e 	bne	r3,zero,4ed8 <_gp+0xffff6f1c>
    4eec:	38000126 	beq	r7,zero,4ef4 <__modsi3+0x54>
    4ef0:	0085c83a 	sub	r2,zero,r2
    4ef4:	f800283a 	ret
    4ef8:	014bc83a 	sub	r5,zero,r5
    4efc:	003fec06 	br	4eb0 <_gp+0xffff6ef4>
    4f00:	0109c83a 	sub	r4,zero,r4
    4f04:	01c00044 	movi	r7,1
    4f08:	003fe706 	br	4ea8 <_gp+0xffff6eec>
    4f0c:	00c00044 	movi	r3,1
    4f10:	003ff106 	br	4ed8 <_gp+0xffff6f1c>

00004f14 <__udivsi3>:
    4f14:	200d883a 	mov	r6,r4
    4f18:	2900152e 	bgeu	r5,r4,4f70 <__udivsi3+0x5c>
    4f1c:	28001416 	blt	r5,zero,4f70 <__udivsi3+0x5c>
    4f20:	00800804 	movi	r2,32
    4f24:	00c00044 	movi	r3,1
    4f28:	00000206 	br	4f34 <__udivsi3+0x20>
    4f2c:	10000e26 	beq	r2,zero,4f68 <__udivsi3+0x54>
    4f30:	28000516 	blt	r5,zero,4f48 <__udivsi3+0x34>
    4f34:	294b883a 	add	r5,r5,r5
    4f38:	10bfffc4 	addi	r2,r2,-1
    4f3c:	18c7883a 	add	r3,r3,r3
    4f40:	293ffa36 	bltu	r5,r4,4f2c <_gp+0xffff6f70>
    4f44:	18000826 	beq	r3,zero,4f68 <__udivsi3+0x54>
    4f48:	0005883a 	mov	r2,zero
    4f4c:	31400236 	bltu	r6,r5,4f58 <__udivsi3+0x44>
    4f50:	314dc83a 	sub	r6,r6,r5
    4f54:	10c4b03a 	or	r2,r2,r3
    4f58:	1806d07a 	srli	r3,r3,1
    4f5c:	280ad07a 	srli	r5,r5,1
    4f60:	183ffa1e 	bne	r3,zero,4f4c <_gp+0xffff6f90>
    4f64:	f800283a 	ret
    4f68:	0005883a 	mov	r2,zero
    4f6c:	f800283a 	ret
    4f70:	00c00044 	movi	r3,1
    4f74:	003ff406 	br	4f48 <_gp+0xffff6f8c>

00004f78 <__umodsi3>:
    4f78:	2005883a 	mov	r2,r4
    4f7c:	2900122e 	bgeu	r5,r4,4fc8 <__umodsi3+0x50>
    4f80:	28001116 	blt	r5,zero,4fc8 <__umodsi3+0x50>
    4f84:	01800804 	movi	r6,32
    4f88:	00c00044 	movi	r3,1
    4f8c:	00000206 	br	4f98 <__umodsi3+0x20>
    4f90:	30000c26 	beq	r6,zero,4fc4 <__umodsi3+0x4c>
    4f94:	28000516 	blt	r5,zero,4fac <__umodsi3+0x34>
    4f98:	294b883a 	add	r5,r5,r5
    4f9c:	31bfffc4 	addi	r6,r6,-1
    4fa0:	18c7883a 	add	r3,r3,r3
    4fa4:	293ffa36 	bltu	r5,r4,4f90 <_gp+0xffff6fd4>
    4fa8:	18000626 	beq	r3,zero,4fc4 <__umodsi3+0x4c>
    4fac:	1806d07a 	srli	r3,r3,1
    4fb0:	11400136 	bltu	r2,r5,4fb8 <__umodsi3+0x40>
    4fb4:	1145c83a 	sub	r2,r2,r5
    4fb8:	280ad07a 	srli	r5,r5,1
    4fbc:	183ffb1e 	bne	r3,zero,4fac <_gp+0xffff6ff0>
    4fc0:	f800283a 	ret
    4fc4:	f800283a 	ret
    4fc8:	00c00044 	movi	r3,1
    4fcc:	003ff706 	br	4fac <_gp+0xffff6ff0>

00004fd0 <__mulsi3>:
    4fd0:	0005883a 	mov	r2,zero
    4fd4:	20000726 	beq	r4,zero,4ff4 <__mulsi3+0x24>
    4fd8:	20c0004c 	andi	r3,r4,1
    4fdc:	2008d07a 	srli	r4,r4,1
    4fe0:	18000126 	beq	r3,zero,4fe8 <__mulsi3+0x18>
    4fe4:	1145883a 	add	r2,r2,r5
    4fe8:	294b883a 	add	r5,r5,r5
    4fec:	203ffa1e 	bne	r4,zero,4fd8 <_gp+0xffff701c>
    4ff0:	f800283a 	ret
    4ff4:	f800283a 	ret

00004ff8 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    4ff8:	00050841 	jmpi	5084 <alt_iic_isr_register>

00004ffc <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4ffc:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5000:	00bfff84 	movi	r2,-2
    5004:	2084703a 	and	r2,r4,r2
    5008:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    500c:	00c00044 	movi	r3,1
    5010:	d0a0c817 	ldw	r2,-31968(gp)
    5014:	194a983a 	sll	r5,r3,r5
    5018:	288ab03a 	or	r5,r5,r2
    501c:	d160c815 	stw	r5,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5020:	d0a0c817 	ldw	r2,-31968(gp)
    5024:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5028:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    502c:	0005883a 	mov	r2,zero
    5030:	f800283a 	ret

00005034 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5034:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5038:	00bfff84 	movi	r2,-2
    503c:	2084703a 	and	r2,r4,r2
    5040:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    5044:	00ffff84 	movi	r3,-2
    5048:	d0a0c817 	ldw	r2,-31968(gp)
    504c:	194a183a 	rol	r5,r3,r5
    5050:	288a703a 	and	r5,r5,r2
    5054:	d160c815 	stw	r5,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5058:	d0a0c817 	ldw	r2,-31968(gp)
    505c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5060:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    5064:	0005883a 	mov	r2,zero
    5068:	f800283a 	ret

0000506c <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    506c:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    5070:	00800044 	movi	r2,1
    5074:	1144983a 	sll	r2,r2,r5
    5078:	10c4703a 	and	r2,r2,r3
}
    507c:	1004c03a 	cmpne	r2,r2,zero
    5080:	f800283a 	ret

00005084 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5084:	00c007c4 	movi	r3,31
    5088:	19401616 	blt	r3,r5,50e4 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    508c:	defffe04 	addi	sp,sp,-8
    5090:	dfc00115 	stw	ra,4(sp)
    5094:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5098:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    509c:	00ffff84 	movi	r3,-2
    50a0:	80c6703a 	and	r3,r16,r3
    50a4:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    50a8:	280490fa 	slli	r2,r5,3
    50ac:	00c00034 	movhi	r3,0
    50b0:	18d8bc04 	addi	r3,r3,25328
    50b4:	1885883a 	add	r2,r3,r2
    50b8:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    50bc:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    50c0:	30000226 	beq	r6,zero,50cc <alt_iic_isr_register+0x48>
    50c4:	0004ffc0 	call	4ffc <alt_ic_irq_enable>
    50c8:	00000106 	br	50d0 <alt_iic_isr_register+0x4c>
    50cc:	00050340 	call	5034 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    50d0:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    50d4:	dfc00117 	ldw	ra,4(sp)
    50d8:	dc000017 	ldw	r16,0(sp)
    50dc:	dec00204 	addi	sp,sp,8
    50e0:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    50e4:	00bffa84 	movi	r2,-22
    50e8:	f800283a 	ret

000050ec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    50ec:	deffff04 	addi	sp,sp,-4
    50f0:	01000034 	movhi	r4,0
    50f4:	01400034 	movhi	r5,0
    50f8:	dfc00015 	stw	ra,0(sp)
    50fc:	21174204 	addi	r4,r4,23816
    5100:	2957fa04 	addi	r5,r5,24552

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5104:	2140061e 	bne	r4,r5,5120 <alt_load+0x34>
    5108:	01000034 	movhi	r4,0
    510c:	01400034 	movhi	r5,0
    5110:	21100804 	addi	r4,r4,16416
    5114:	29500804 	addi	r5,r5,16416
    5118:	2140121e 	bne	r4,r5,5164 <alt_load+0x78>
    511c:	00000b06 	br	514c <alt_load+0x60>
    5120:	00c00034 	movhi	r3,0
    5124:	18d7fa04 	addi	r3,r3,24552
    5128:	1907c83a 	sub	r3,r3,r4
    512c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    5130:	10fff526 	beq	r2,r3,5108 <_gp+0xffff714c>
    {
      *to++ = *from++;
    5134:	114f883a 	add	r7,r2,r5
    5138:	39c00017 	ldw	r7,0(r7)
    513c:	110d883a 	add	r6,r2,r4
    5140:	10800104 	addi	r2,r2,4
    5144:	31c00015 	stw	r7,0(r6)
    5148:	003ff906 	br	5130 <_gp+0xffff7174>
    514c:	01000034 	movhi	r4,0
    5150:	01400034 	movhi	r5,0
    5154:	21170504 	addi	r4,r4,23572
    5158:	29570504 	addi	r5,r5,23572

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    515c:	2140101e 	bne	r4,r5,51a0 <alt_load+0xb4>
    5160:	00000b06 	br	5190 <alt_load+0xa4>
    5164:	00c00034 	movhi	r3,0
    5168:	18d06004 	addi	r3,r3,16768
    516c:	1907c83a 	sub	r3,r3,r4
    5170:	0005883a 	mov	r2,zero
  {
    while( to != end )
    5174:	10fff526 	beq	r2,r3,514c <_gp+0xffff7190>
    {
      *to++ = *from++;
    5178:	114f883a 	add	r7,r2,r5
    517c:	39c00017 	ldw	r7,0(r7)
    5180:	110d883a 	add	r6,r2,r4
    5184:	10800104 	addi	r2,r2,4
    5188:	31c00015 	stw	r7,0(r6)
    518c:	003ff906 	br	5174 <_gp+0xffff71b8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    5190:	00054940 	call	5494 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    5194:	dfc00017 	ldw	ra,0(sp)
    5198:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    519c:	000550c1 	jmpi	550c <alt_icache_flush_all>
    51a0:	00c00034 	movhi	r3,0
    51a4:	18d74204 	addi	r3,r3,23816
    51a8:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    51ac:	0005883a 	mov	r2,zero
  {
    while( to != end )
    51b0:	18bff726 	beq	r3,r2,5190 <_gp+0xffff71d4>
    {
      *to++ = *from++;
    51b4:	114f883a 	add	r7,r2,r5
    51b8:	39c00017 	ldw	r7,0(r7)
    51bc:	110d883a 	add	r6,r2,r4
    51c0:	10800104 	addi	r2,r2,4
    51c4:	31c00015 	stw	r7,0(r6)
    51c8:	003ff906 	br	51b0 <_gp+0xffff71f4>

000051cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    51cc:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    51d0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    51d4:	dfc00115 	stw	ra,4(sp)
    51d8:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    51dc:	00053040 	call	5304 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    51e0:	00053240 	call	5324 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    51e4:	01800034 	movhi	r6,0
    51e8:	31973a04 	addi	r6,r6,23784
    51ec:	300b883a 	mov	r5,r6
    51f0:	3009883a 	mov	r4,r6
    51f4:	000560c0 	call	560c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    51f8:	d1a0c917 	ldw	r6,-31964(gp)
    51fc:	d160ca17 	ldw	r5,-31960(gp)
    5200:	d120cb17 	ldw	r4,-31956(gp)
    5204:	00045980 	call	4598 <main>
  close(STDOUT_FILENO);
    5208:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    520c:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    5210:	00053e40 	call	53e4 <close>
  exit (result);
    5214:	8009883a 	mov	r4,r16
    5218:	0005a200 	call	5a20 <exit>

0000521c <alt_get_errno>:

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    521c:	d0a00a17 	ldw	r2,-32728(gp)
    5220:	10000126 	beq	r2,zero,5228 <alt_get_errno+0xc>
    5224:	1000683a 	jmp	r2
}
    5228:	d0a0c704 	addi	r2,gp,-31972
    522c:	f800283a 	ret

00005230 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    5230:	defffa04 	addi	sp,sp,-24
    5234:	dfc00515 	stw	ra,20(sp)
    5238:	dd000415 	stw	r20,16(sp)
    523c:	dcc00315 	stw	r19,12(sp)
    5240:	dc800215 	stw	r18,8(sp)
    5244:	dc400115 	stw	r17,4(sp)
    5248:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    524c:	20002016 	blt	r4,zero,52d0 <write+0xa0>
    5250:	2827883a 	mov	r19,r5
    5254:	04000034 	movhi	r16,0
    5258:	01400304 	movi	r5,12
    525c:	2025883a 	mov	r18,r4
    5260:	3029883a 	mov	r20,r6
    5264:	84178504 	addi	r16,r16,24084
    5268:	0004fd00 	call	4fd0 <__mulsi3>
    526c:	80a3883a 	add	r17,r16,r2
  
  if (fd)
    5270:	88001726 	beq	r17,zero,52d0 <write+0xa0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    5274:	88800217 	ldw	r2,8(r17)
    5278:	108000cc 	andi	r2,r2,3
    527c:	10001126 	beq	r2,zero,52c4 <write+0x94>
    5280:	01400304 	movi	r5,12
    5284:	9009883a 	mov	r4,r18
    5288:	0004fd00 	call	4fd0 <__mulsi3>
    528c:	8085883a 	add	r2,r16,r2
    5290:	10800017 	ldw	r2,0(r2)
    5294:	10800617 	ldw	r2,24(r2)
    5298:	10000a26 	beq	r2,zero,52c4 <write+0x94>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    529c:	a00d883a 	mov	r6,r20
    52a0:	980b883a 	mov	r5,r19
    52a4:	8809883a 	mov	r4,r17
    52a8:	103ee83a 	callr	r2
    52ac:	1021883a 	mov	r16,r2
    52b0:	10000b0e 	bge	r2,zero,52e0 <write+0xb0>
      {
        ALT_ERRNO = -rval;
    52b4:	000521c0 	call	521c <alt_get_errno>
    52b8:	0421c83a 	sub	r16,zero,r16
    52bc:	14000015 	stw	r16,0(r2)
    52c0:	00000606 	br	52dc <write+0xac>
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    52c4:	000521c0 	call	521c <alt_get_errno>
    52c8:	00c00344 	movi	r3,13
    52cc:	00000206 	br	52d8 <write+0xa8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    52d0:	000521c0 	call	521c <alt_get_errno>
    52d4:	00c01444 	movi	r3,81
    52d8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    52dc:	043fffc4 	movi	r16,-1
}
    52e0:	8005883a 	mov	r2,r16
    52e4:	dfc00517 	ldw	ra,20(sp)
    52e8:	dd000417 	ldw	r20,16(sp)
    52ec:	dcc00317 	ldw	r19,12(sp)
    52f0:	dc800217 	ldw	r18,8(sp)
    52f4:	dc400117 	ldw	r17,4(sp)
    52f8:	dc000017 	ldw	r16,0(sp)
    52fc:	dec00604 	addi	sp,sp,24
    5300:	f800283a 	ret

00005304 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    5304:	deffff04 	addi	sp,sp,-4
    5308:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    530c:	000587c0 	call	587c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    5310:	00800044 	movi	r2,1
    5314:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    5318:	dfc00017 	ldw	ra,0(sp)
    531c:	dec00104 	addi	sp,sp,4
    5320:	f800283a 	ret

00005324 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    5324:	01000034 	movhi	r4,0
    5328:	d1600604 	addi	r5,gp,-32744
    532c:	21177a04 	addi	r4,r4,24040
    5330:	00054a01 	jmpi	54a0 <alt_dev_llist_insert>

00005334 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    5334:	20800017 	ldw	r2,0(r4)
    5338:	21c00217 	ldw	r7,8(r4)
    533c:	11000a04 	addi	r4,r2,40
    5340:	00053541 	jmpi	5354 <altera_avalon_jtag_uart_read>

00005344 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    5344:	20800017 	ldw	r2,0(r4)
    5348:	21c00217 	ldw	r7,8(r4)
    534c:	11000a04 	addi	r4,r2,40
    5350:	00053b01 	jmpi	53b0 <altera_avalon_jtag_uart_write>

00005354 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    5354:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    5358:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    535c:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    5360:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    5364:	11800b2e 	bgeu	r2,r6,5394 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    5368:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    536c:	1a60000c 	andi	r9,r3,32768
    5370:	48000326 	beq	r9,zero,5380 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    5374:	10c00005 	stb	r3,0(r2)
    5378:	10800044 	addi	r2,r2,1
    537c:	003ff906 	br	5364 <_gp+0xffff73a8>
    else if (ptr != buffer)
    5380:	11400226 	beq	r2,r5,538c <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
    5384:	1145c83a 	sub	r2,r2,r5
    5388:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    538c:	403ff526 	beq	r8,zero,5364 <_gp+0xffff73a8>
    5390:	00000106 	br	5398 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
    5394:	117ffb1e 	bne	r2,r5,5384 <_gp+0xffff73c8>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    5398:	39d0000c 	andi	r7,r7,16384
    539c:	3800021e 	bne	r7,zero,53a8 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
    53a0:	00bffec4 	movi	r2,-5
    53a4:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    53a8:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    53ac:	f800283a 	ret

000053b0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    53b0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    53b4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    53b8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    53bc:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    53c0:	2980072e 	bgeu	r5,r6,53e0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    53c4:	38c00037 	ldwio	r3,0(r7)
    53c8:	18ffffec 	andhi	r3,r3,65535
    53cc:	183ffc26 	beq	r3,zero,53c0 <_gp+0xffff7404>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    53d0:	28c00007 	ldb	r3,0(r5)
    53d4:	20c00035 	stwio	r3,0(r4)
    53d8:	29400044 	addi	r5,r5,1
    53dc:	003ff806 	br	53c0 <_gp+0xffff7404>

  return count;
}
    53e0:	f800283a 	ret

000053e4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    53e4:	defffd04 	addi	sp,sp,-12
    53e8:	dfc00215 	stw	ra,8(sp)
    53ec:	dc400115 	stw	r17,4(sp)
    53f0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    53f4:	20001a16 	blt	r4,zero,5460 <close+0x7c>
    53f8:	01400304 	movi	r5,12
    53fc:	2023883a 	mov	r17,r4
    5400:	0004fd00 	call	4fd0 <__mulsi3>
    5404:	01000034 	movhi	r4,0
    5408:	21178504 	addi	r4,r4,24084
    540c:	2089883a 	add	r4,r4,r2

  if (fd)
    5410:	20001326 	beq	r4,zero,5460 <close+0x7c>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    5414:	20800017 	ldw	r2,0(r4)
    5418:	10800417 	ldw	r2,16(r2)
    541c:	10000326 	beq	r2,zero,542c <close+0x48>
    5420:	103ee83a 	callr	r2
    5424:	1021883a 	mov	r16,r2
    5428:	00000106 	br	5430 <close+0x4c>
    542c:	0021883a 	mov	r16,zero

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    5430:	8809883a 	mov	r4,r17
    5434:	00058200 	call	5820 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    5438:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    543c:	8000100e 	bge	r16,zero,5480 <close+0x9c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    5440:	d0a00a17 	ldw	r2,-32728(gp)
    5444:	10000226 	beq	r2,zero,5450 <close+0x6c>
    5448:	103ee83a 	callr	r2
    544c:	00000106 	br	5454 <close+0x70>
    5450:	d0a0c704 	addi	r2,gp,-31972
    {
      ALT_ERRNO = -rval;
    5454:	0421c83a 	sub	r16,zero,r16
    5458:	14000015 	stw	r16,0(r2)
    545c:	00000706 	br	547c <close+0x98>
    5460:	d0a00a17 	ldw	r2,-32728(gp)
    5464:	10000226 	beq	r2,zero,5470 <close+0x8c>
    5468:	103ee83a 	callr	r2
    546c:	00000106 	br	5474 <close+0x90>
    5470:	d0a0c704 	addi	r2,gp,-31972
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5474:	00c01444 	movi	r3,81
    5478:	10c00015 	stw	r3,0(r2)
    return -1;
    547c:	00bfffc4 	movi	r2,-1
  }
}
    5480:	dfc00217 	ldw	ra,8(sp)
    5484:	dc400117 	ldw	r17,4(sp)
    5488:	dc000017 	ldw	r16,0(sp)
    548c:	dec00304 	addi	sp,sp,12
    5490:	f800283a 	ret

00005494 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    5494:	f800283a 	ret

00005498 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    5498:	3005883a 	mov	r2,r6
    549c:	f800283a 	ret

000054a0 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    54a0:	20000226 	beq	r4,zero,54ac <alt_dev_llist_insert+0xc>
    54a4:	20800217 	ldw	r2,8(r4)
    54a8:	1000101e 	bne	r2,zero,54ec <alt_dev_llist_insert+0x4c>
    54ac:	d0a00a17 	ldw	r2,-32728(gp)
    54b0:	10000926 	beq	r2,zero,54d8 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    54b4:	deffff04 	addi	sp,sp,-4
    54b8:	dfc00015 	stw	ra,0(sp)
    54bc:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    54c0:	00c00584 	movi	r3,22
    54c4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    54c8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    54cc:	dfc00017 	ldw	ra,0(sp)
    54d0:	dec00104 	addi	sp,sp,4
    54d4:	f800283a 	ret
    54d8:	d0a0c704 	addi	r2,gp,-31972
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    54dc:	00c00584 	movi	r3,22
    54e0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    54e4:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    54e8:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    54ec:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    54f0:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    54f4:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    54f8:	28800017 	ldw	r2,0(r5)
    54fc:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    5500:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    5504:	0005883a 	mov	r2,zero
    5508:	f800283a 	ret

0000550c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    550c:	f800283a 	ret

00005510 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    5510:	213ffe84 	addi	r4,r4,-6
    5514:	008003c4 	movi	r2,15
    5518:	11001636 	bltu	r2,r4,5574 <alt_exception_cause_generated_bad_addr+0x64>
    551c:	200890ba 	slli	r4,r4,2
    5520:	00800034 	movhi	r2,0
    5524:	10954d04 	addi	r2,r2,21812
    5528:	2089883a 	add	r4,r4,r2
    552c:	20800017 	ldw	r2,0(r4)
    5530:	1000683a 	jmp	r2
    5534:	0000557c 	xorhi	zero,zero,341
    5538:	0000557c 	xorhi	zero,zero,341
    553c:	00005574 	movhi	zero,341
    5540:	00005574 	movhi	zero,341
    5544:	00005574 	movhi	zero,341
    5548:	0000557c 	xorhi	zero,zero,341
    554c:	00005574 	movhi	zero,341
    5550:	00005574 	movhi	zero,341
    5554:	0000557c 	xorhi	zero,zero,341
    5558:	0000557c 	xorhi	zero,zero,341
    555c:	00005574 	movhi	zero,341
    5560:	0000557c 	xorhi	zero,zero,341
    5564:	00005574 	movhi	zero,341
    5568:	00005574 	movhi	zero,341
    556c:	00005574 	movhi	zero,341
    5570:	0000557c 	xorhi	zero,zero,341
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    5574:	0005883a 	mov	r2,zero
    5578:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    557c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    5580:	f800283a 	ret

00005584 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
    5584:	defffd04 	addi	sp,sp,-12
    5588:	dc400115 	stw	r17,4(sp)
    558c:	2023883a 	mov	r17,r4
    5590:	2809883a 	mov	r4,r5
    5594:	300b883a 	mov	r5,r6
{
  int old;

  old = open (name, flags, mode);
    5598:	01807fc4 	movi	r6,511
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
    559c:	dfc00215 	stw	ra,8(sp)
    55a0:	dc000015 	stw	r16,0(sp)
{
  int old;

  old = open (name, flags, mode);
    55a4:	00056800 	call	5680 <open>

  if (old >= 0)
    55a8:	10001316 	blt	r2,zero,55f8 <alt_open_fd.constprop.0+0x74>
  {
    fd->dev      = alt_fd_list[old].dev;
    55ac:	01400304 	movi	r5,12
    55b0:	1009883a 	mov	r4,r2
    55b4:	1021883a 	mov	r16,r2
    55b8:	0004fd00 	call	4fd0 <__mulsi3>
    55bc:	00c00034 	movhi	r3,0
    55c0:	18d78504 	addi	r3,r3,24084
    55c4:	1885883a 	add	r2,r3,r2
    55c8:	10c00017 	ldw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    55cc:	8009883a 	mov	r4,r16

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    55d0:	88c00015 	stw	r3,0(r17)
    fd->priv     = alt_fd_list[old].priv;
    55d4:	10c00117 	ldw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    55d8:	10800217 	ldw	r2,8(r2)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    55dc:	88c00115 	stw	r3,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    55e0:	88800215 	stw	r2,8(r17)

    alt_release_fd (old);
  }
} 
    55e4:	dfc00217 	ldw	ra,8(sp)
    55e8:	dc400117 	ldw	r17,4(sp)
    55ec:	dc000017 	ldw	r16,0(sp)
    55f0:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    55f4:	00058201 	jmpi	5820 <alt_release_fd>
  }
} 
    55f8:	dfc00217 	ldw	ra,8(sp)
    55fc:	dc400117 	ldw	r17,4(sp)
    5600:	dc000017 	ldw	r16,0(sp)
    5604:	dec00304 	addi	sp,sp,12
    5608:	f800283a 	ret

0000560c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    560c:	defffb04 	addi	sp,sp,-20
    5610:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    5614:	04000034 	movhi	r16,0
    5618:	84178804 	addi	r16,r16,24096
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    561c:	dc400115 	stw	r17,4(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    5620:	04400044 	movi	r17,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    5624:	dcc00315 	stw	r19,12(sp)
    5628:	dc800215 	stw	r18,8(sp)
    562c:	2827883a 	mov	r19,r5
    5630:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    5634:	200b883a 	mov	r5,r4
    5638:	880d883a 	mov	r6,r17
    563c:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    5640:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    5644:	00055840 	call	5584 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    5648:	980b883a 	mov	r5,r19
    564c:	813ffd04 	addi	r4,r16,-12
    5650:	000d883a 	mov	r6,zero
    5654:	00055840 	call	5584 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    5658:	880d883a 	mov	r6,r17
    565c:	900b883a 	mov	r5,r18
    5660:	81000304 	addi	r4,r16,12
}  
    5664:	dfc00417 	ldw	ra,16(sp)
    5668:	dcc00317 	ldw	r19,12(sp)
    566c:	dc800217 	ldw	r18,8(sp)
    5670:	dc400117 	ldw	r17,4(sp)
    5674:	dc000017 	ldw	r16,0(sp)
    5678:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    567c:	00055841 	jmpi	5584 <alt_open_fd.constprop.0>

00005680 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    5680:	defff504 	addi	sp,sp,-44
    5684:	dd000515 	stw	r20,20(sp)
    5688:	2829883a 	mov	r20,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    568c:	d1600604 	addi	r5,gp,-32744
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    5690:	dd400615 	stw	r21,24(sp)
    5694:	dcc00415 	stw	r19,16(sp)
    5698:	dfc00a15 	stw	ra,40(sp)
    569c:	df000915 	stw	fp,36(sp)
    56a0:	ddc00815 	stw	r23,32(sp)
    56a4:	dd800715 	stw	r22,28(sp)
    56a8:	dc800315 	stw	r18,12(sp)
    56ac:	dc400215 	stw	r17,8(sp)
    56b0:	dc000115 	stw	r16,4(sp)
    56b4:	2027883a 	mov	r19,r4
    56b8:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    56bc:	00058840 	call	5884 <alt_find_dev>
    56c0:	1000061e 	bne	r2,zero,56dc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    56c4:	9809883a 	mov	r4,r19
    56c8:	00058f80 	call	58f8 <alt_find_file>
    56cc:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    56d0:	10004026 	beq	r2,zero,57d4 <open+0x154>
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    isafs = 1;
    56d4:	04800044 	movi	r18,1
    56d8:	00000206 	br	56e4 <open+0x64>
    56dc:	1023883a 	mov	r17,r2
    56e0:	0025883a 	mov	r18,zero
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    56e4:	8809883a 	mov	r4,r17
    56e8:	000599c0 	call	599c <alt_get_fd>
    56ec:	1021883a 	mov	r16,r2
    56f0:	10003b16 	blt	r2,zero,57e0 <open+0x160>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    56f4:	01400304 	movi	r5,12
    56f8:	1009883a 	mov	r4,r2
    56fc:	05800034 	movhi	r22,0
    5700:	0004fd00 	call	4fd0 <__mulsi3>
    5704:	b5978504 	addi	r22,r22,24084
    5708:	b0af883a 	add	r23,r22,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    570c:	00900034 	movhi	r2,16384
    5710:	10bfffc4 	addi	r2,r2,-1
    5714:	a084703a 	and	r2,r20,r2
    5718:	b8c00204 	addi	r3,r23,8
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    571c:	90000526 	beq	r18,zero,5734 <open+0xb4>
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    5720:	18800015 	stw	r2,0(r3)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    5724:	88800317 	ldw	r2,12(r17)
    5728:	1000171e 	bne	r2,zero,5788 <open+0x108>
    572c:	8005883a 	mov	r2,r16
    5730:	00002f06 	br	57f0 <open+0x170>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    5734:	10900034 	orhi	r2,r2,16384
    5738:	18800015 	stw	r2,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    573c:	d0e00517 	ldw	r3,-32748(gp)
    5740:	b025883a 	mov	r18,r22
    5744:	0039883a 	mov	fp,zero
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5748:	8009883a 	mov	r4,r16
    574c:	01400304 	movi	r5,12
    5750:	d8c00015 	stw	r3,0(sp)
    5754:	0004fd00 	call	4fd0 <__mulsi3>
    5758:	b085883a 	add	r2,r22,r2
    575c:	91000017 	ldw	r4,0(r18)
    5760:	10800017 	ldw	r2,0(r2)
    5764:	d8c00017 	ldw	r3,0(sp)
    5768:	2080031e 	bne	r4,r2,5778 <open+0xf8>
    576c:	90800217 	ldw	r2,8(r18)
    5770:	1000010e 	bge	r2,zero,5778 <open+0xf8>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5774:	95c01c1e 	bne	r18,r23,57e8 <open+0x168>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5778:	e7000044 	addi	fp,fp,1
    577c:	94800304 	addi	r18,r18,12
    5780:	1f3ff12e 	bgeu	r3,fp,5748 <_gp+0xffff778c>
    5784:	003fe706 	br	5724 <_gp+0xffff7768>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    5788:	a80f883a 	mov	r7,r21
    578c:	a00d883a 	mov	r6,r20
    5790:	980b883a 	mov	r5,r19
    5794:	b809883a 	mov	r4,r23
    5798:	103ee83a 	callr	r2
    579c:	1023883a 	mov	r17,r2
    57a0:	8005883a 	mov	r2,r16
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    57a4:	8800120e 	bge	r17,zero,57f0 <open+0x170>
  {
    alt_release_fd (index);  
    57a8:	8009883a 	mov	r4,r16
    57ac:	00058200 	call	5820 <alt_release_fd>
    57b0:	d0a00a17 	ldw	r2,-32728(gp)
    57b4:	10000226 	beq	r2,zero,57c0 <open+0x140>
    57b8:	103ee83a 	callr	r2
    57bc:	00000106 	br	57c4 <open+0x144>
    57c0:	d0a0c704 	addi	r2,gp,-31972
    ALT_ERRNO = -status;
    57c4:	0463c83a 	sub	r17,zero,r17
    57c8:	14400015 	stw	r17,0(r2)
    return -1;
    57cc:	00bfffc4 	movi	r2,-1
    57d0:	00000706 	br	57f0 <open+0x170>
      }
    }
  }
  else
  {
    status = -ENODEV;
    57d4:	047ffb44 	movi	r17,-19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    57d8:	043fffc4 	movi	r16,-1
    57dc:	003ff206 	br	57a8 <_gp+0xffff77ec>
    57e0:	1023883a 	mov	r17,r2
    57e4:	003ff006 	br	57a8 <_gp+0xffff77ec>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    57e8:	047ffcc4 	movi	r17,-13
    57ec:	003fee06 	br	57a8 <_gp+0xffff77ec>
  }
  
  /* return the reference upon success */

  return index;
}
    57f0:	dfc00a17 	ldw	ra,40(sp)
    57f4:	df000917 	ldw	fp,36(sp)
    57f8:	ddc00817 	ldw	r23,32(sp)
    57fc:	dd800717 	ldw	r22,28(sp)
    5800:	dd400617 	ldw	r21,24(sp)
    5804:	dd000517 	ldw	r20,20(sp)
    5808:	dcc00417 	ldw	r19,16(sp)
    580c:	dc800317 	ldw	r18,12(sp)
    5810:	dc400217 	ldw	r17,8(sp)
    5814:	dc000117 	ldw	r16,4(sp)
    5818:	dec00b04 	addi	sp,sp,44
    581c:	f800283a 	ret

00005820 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    5820:	00c00084 	movi	r3,2
    5824:	1900140e 	bge	r3,r4,5878 <alt_release_fd+0x58>
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    5828:	defffd04 	addi	sp,sp,-12
    582c:	dc000015 	stw	r16,0(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
    5830:	01400304 	movi	r5,12
    5834:	04000034 	movhi	r16,0
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    5838:	dfc00215 	stw	ra,8(sp)
    583c:	dc400115 	stw	r17,4(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
    5840:	84178504 	addi	r16,r16,24084
    5844:	2023883a 	mov	r17,r4
    5848:	0004fd00 	call	4fd0 <__mulsi3>
    584c:	8085883a 	add	r2,r16,r2
    alt_fd_list[fd].dev      = 0;
    5850:	01400304 	movi	r5,12
    5854:	8809883a 	mov	r4,r17

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
    5858:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    585c:	0004fd00 	call	4fd0 <__mulsi3>
    5860:	8085883a 	add	r2,r16,r2
    5864:	10000015 	stw	zero,0(r2)
  }
}
    5868:	dfc00217 	ldw	ra,8(sp)
    586c:	dc400117 	ldw	r17,4(sp)
    5870:	dc000017 	ldw	r16,0(sp)
    5874:	dec00304 	addi	sp,sp,12
    5878:	f800283a 	ret

0000587c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    587c:	000170fa 	wrctl	ienable,zero
    5880:	f800283a 	ret

00005884 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5884:	defffb04 	addi	sp,sp,-20
    5888:	dcc00315 	stw	r19,12(sp)
    588c:	dc800215 	stw	r18,8(sp)
    5890:	dc400115 	stw	r17,4(sp)
    5894:	dc000015 	stw	r16,0(sp)
    5898:	dfc00415 	stw	ra,16(sp)
    589c:	2027883a 	mov	r19,r4
    58a0:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
    58a4:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    58a8:	000473c0 	call	473c <strlen>
    58ac:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    58b0:	84400726 	beq	r16,r17,58d0 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    58b4:	81000217 	ldw	r4,8(r16)
    58b8:	900d883a 	mov	r6,r18
    58bc:	980b883a 	mov	r5,r19
    58c0:	0005a400 	call	5a40 <memcmp>
    58c4:	10000426 	beq	r2,zero,58d8 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    58c8:	84000017 	ldw	r16,0(r16)
    58cc:	003ff806 	br	58b0 <_gp+0xffff78f4>
  }
  
  /* No match found */
  
  return NULL;
    58d0:	0005883a 	mov	r2,zero
    58d4:	00000106 	br	58dc <alt_find_dev+0x58>
    58d8:	8005883a 	mov	r2,r16
}
    58dc:	dfc00417 	ldw	ra,16(sp)
    58e0:	dcc00317 	ldw	r19,12(sp)
    58e4:	dc800217 	ldw	r18,8(sp)
    58e8:	dc400117 	ldw	r17,4(sp)
    58ec:	dc000017 	ldw	r16,0(sp)
    58f0:	dec00504 	addi	sp,sp,20
    58f4:	f800283a 	ret

000058f8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    58f8:	defffa04 	addi	sp,sp,-24
    58fc:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    5900:	d4200817 	ldw	r16,-32736(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5904:	dd000415 	stw	r20,16(sp)
    5908:	dcc00315 	stw	r19,12(sp)
    590c:	dc800215 	stw	r18,8(sp)
    5910:	dfc00515 	stw	ra,20(sp)
    5914:	dc400115 	stw	r17,4(sp)
    5918:	2025883a 	mov	r18,r4
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    591c:	d5200804 	addi	r20,gp,-32736
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    5920:	04c00bc4 	movi	r19,47
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5924:	85001226 	beq	r16,r20,5970 <alt_find_file+0x78>
  {
    len = strlen(next->name);
    5928:	84400217 	ldw	r17,8(r16)
    592c:	8809883a 	mov	r4,r17
    5930:	000473c0 	call	473c <strlen>
    
    if (next->name[len-1] == '/')
    5934:	8887883a 	add	r3,r17,r2
    5938:	18ffffc7 	ldb	r3,-1(r3)
    593c:	1cc0011e 	bne	r3,r19,5944 <alt_find_file+0x4c>
    {
      len -= 1;
    5940:	10bfffc4 	addi	r2,r2,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5944:	9087883a 	add	r3,r18,r2
    5948:	18c00007 	ldb	r3,0(r3)
    594c:	1cc00126 	beq	r3,r19,5954 <alt_find_file+0x5c>
    5950:	1800051e 	bne	r3,zero,5968 <alt_find_file+0x70>
        !memcmp (next->name, name, len))
    5954:	100d883a 	mov	r6,r2
    5958:	900b883a 	mov	r5,r18
    595c:	8809883a 	mov	r4,r17
    5960:	0005a400 	call	5a40 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5964:	10000426 	beq	r2,zero,5978 <alt_find_file+0x80>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    5968:	84000017 	ldw	r16,0(r16)
    596c:	003fed06 	br	5924 <_gp+0xffff7968>
  }
  
  /* No match found */
  
  return NULL;     
    5970:	0005883a 	mov	r2,zero
    5974:	00000106 	br	597c <alt_find_file+0x84>
    5978:	8005883a 	mov	r2,r16
}
    597c:	dfc00517 	ldw	ra,20(sp)
    5980:	dd000417 	ldw	r20,16(sp)
    5984:	dcc00317 	ldw	r19,12(sp)
    5988:	dc800217 	ldw	r18,8(sp)
    598c:	dc400117 	ldw	r17,4(sp)
    5990:	dc000017 	ldw	r16,0(sp)
    5994:	dec00604 	addi	sp,sp,24
    5998:	f800283a 	ret

0000599c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    599c:	defffb04 	addi	sp,sp,-20
    59a0:	dcc00315 	stw	r19,12(sp)
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    59a4:	04c00034 	movhi	r19,0
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    59a8:	dc800215 	stw	r18,8(sp)
    59ac:	dc400115 	stw	r17,4(sp)
    59b0:	dc000015 	stw	r16,0(sp)
    59b4:	dfc00415 	stw	ra,16(sp)
    59b8:	2025883a 	mov	r18,r4
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    59bc:	0021883a 	mov	r16,zero
  {
    if (!alt_fd_list[i].dev)
    59c0:	9cd78504 	addi	r19,r19,24084
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    59c4:	04400804 	movi	r17,32
  {
    if (!alt_fd_list[i].dev)
    59c8:	01400304 	movi	r5,12
    59cc:	8009883a 	mov	r4,r16
    59d0:	0004fd00 	call	4fd0 <__mulsi3>
    59d4:	9885883a 	add	r2,r19,r2
    59d8:	10c00017 	ldw	r3,0(r2)
    59dc:	1800051e 	bne	r3,zero,59f4 <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
    59e0:	14800015 	stw	r18,0(r2)
      if (i > alt_max_fd)
    59e4:	d0a00517 	ldw	r2,-32748(gp)
    59e8:	1400050e 	bge	r2,r16,5a00 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
    59ec:	d4200515 	stw	r16,-32748(gp)
    59f0:	00000306 	br	5a00 <alt_get_fd+0x64>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    59f4:	84000044 	addi	r16,r16,1
    59f8:	847ff31e 	bne	r16,r17,59c8 <_gp+0xffff7a0c>
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    59fc:	043ffa04 	movi	r16,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    5a00:	8005883a 	mov	r2,r16
    5a04:	dfc00417 	ldw	ra,16(sp)
    5a08:	dcc00317 	ldw	r19,12(sp)
    5a0c:	dc800217 	ldw	r18,8(sp)
    5a10:	dc400117 	ldw	r17,4(sp)
    5a14:	dc000017 	ldw	r16,0(sp)
    5a18:	dec00504 	addi	sp,sp,20
    5a1c:	f800283a 	ret

00005a20 <exit>:
    5a20:	defffe04 	addi	sp,sp,-8
    5a24:	000b883a 	mov	r5,zero
    5a28:	dc000015 	stw	r16,0(sp)
    5a2c:	dfc00115 	stw	ra,4(sp)
    5a30:	2021883a 	mov	r16,r4
    5a34:	0005a700 	call	5a70 <__call_exitprocs>
    5a38:	8009883a 	mov	r4,r16
    5a3c:	0005c000 	call	5c00 <_exit>

00005a40 <memcmp>:
    5a40:	218d883a 	add	r6,r4,r6
    5a44:	21800826 	beq	r4,r6,5a68 <memcmp+0x28>
    5a48:	20800003 	ldbu	r2,0(r4)
    5a4c:	28c00003 	ldbu	r3,0(r5)
    5a50:	10c00226 	beq	r2,r3,5a5c <memcmp+0x1c>
    5a54:	10c5c83a 	sub	r2,r2,r3
    5a58:	f800283a 	ret
    5a5c:	21000044 	addi	r4,r4,1
    5a60:	29400044 	addi	r5,r5,1
    5a64:	003ff706 	br	5a44 <_gp+0xffff7a88>
    5a68:	0005883a 	mov	r2,zero
    5a6c:	f800283a 	ret

00005a70 <__call_exitprocs>:
    5a70:	defff504 	addi	sp,sp,-44
    5a74:	dd000515 	stw	r20,20(sp)
    5a78:	05000034 	movhi	r20,0
    5a7c:	dc800315 	stw	r18,12(sp)
    5a80:	dfc00a15 	stw	ra,40(sp)
    5a84:	df000915 	stw	fp,36(sp)
    5a88:	ddc00815 	stw	r23,32(sp)
    5a8c:	dd800715 	stw	r22,28(sp)
    5a90:	dd400615 	stw	r21,24(sp)
    5a94:	dcc00415 	stw	r19,16(sp)
    5a98:	dc400215 	stw	r17,8(sp)
    5a9c:	dc000115 	stw	r16,4(sp)
    5aa0:	d9000015 	stw	r4,0(sp)
    5aa4:	2825883a 	mov	r18,r5
    5aa8:	a517f104 	addi	r20,r20,24516
    5aac:	a4400017 	ldw	r17,0(r20)
    5ab0:	8cc00c17 	ldw	r19,48(r17)
    5ab4:	8c400c04 	addi	r17,r17,48
    5ab8:	98004526 	beq	r19,zero,5bd0 <__call_exitprocs+0x160>
    5abc:	9c000117 	ldw	r16,4(r19)
    5ac0:	00900034 	movhi	r2,16384
    5ac4:	10bfffc4 	addi	r2,r2,-1
    5ac8:	9d402217 	ldw	r21,136(r19)
    5acc:	85bfffc4 	addi	r22,r16,-1
    5ad0:	80a1883a 	add	r16,r16,r2
    5ad4:	8421883a 	add	r16,r16,r16
    5ad8:	8421883a 	add	r16,r16,r16
    5adc:	ac2f883a 	add	r23,r21,r16
    5ae0:	84000204 	addi	r16,r16,8
    5ae4:	9c21883a 	add	r16,r19,r16
    5ae8:	b0002716 	blt	r22,zero,5b88 <__call_exitprocs+0x118>
    5aec:	90000726 	beq	r18,zero,5b0c <__call_exitprocs+0x9c>
    5af0:	a800041e 	bne	r21,zero,5b04 <__call_exitprocs+0x94>
    5af4:	b5bfffc4 	addi	r22,r22,-1
    5af8:	bdffff04 	addi	r23,r23,-4
    5afc:	843fff04 	addi	r16,r16,-4
    5b00:	003ff906 	br	5ae8 <_gp+0xffff7b2c>
    5b04:	b9002017 	ldw	r4,128(r23)
    5b08:	913ffa1e 	bne	r18,r4,5af4 <_gp+0xffff7b38>
    5b0c:	99000117 	ldw	r4,4(r19)
    5b10:	82000017 	ldw	r8,0(r16)
    5b14:	213fffc4 	addi	r4,r4,-1
    5b18:	b100021e 	bne	r22,r4,5b24 <__call_exitprocs+0xb4>
    5b1c:	9d800115 	stw	r22,4(r19)
    5b20:	00000106 	br	5b28 <__call_exitprocs+0xb8>
    5b24:	80000015 	stw	zero,0(r16)
    5b28:	403ff226 	beq	r8,zero,5af4 <_gp+0xffff7b38>
    5b2c:	9f000117 	ldw	fp,4(r19)
    5b30:	a8000526 	beq	r21,zero,5b48 <__call_exitprocs+0xd8>
    5b34:	00800044 	movi	r2,1
    5b38:	1592983a 	sll	r9,r2,r22
    5b3c:	a9404017 	ldw	r5,256(r21)
    5b40:	494a703a 	and	r5,r9,r5
    5b44:	2800021e 	bne	r5,zero,5b50 <__call_exitprocs+0xe0>
    5b48:	403ee83a 	callr	r8
    5b4c:	00000906 	br	5b74 <__call_exitprocs+0x104>
    5b50:	a9004117 	ldw	r4,260(r21)
    5b54:	4908703a 	and	r4,r9,r4
    5b58:	2000041e 	bne	r4,zero,5b6c <__call_exitprocs+0xfc>
    5b5c:	b9400017 	ldw	r5,0(r23)
    5b60:	d9000017 	ldw	r4,0(sp)
    5b64:	403ee83a 	callr	r8
    5b68:	00000206 	br	5b74 <__call_exitprocs+0x104>
    5b6c:	b9000017 	ldw	r4,0(r23)
    5b70:	403ee83a 	callr	r8
    5b74:	99000117 	ldw	r4,4(r19)
    5b78:	e13fcc1e 	bne	fp,r4,5aac <_gp+0xffff7af0>
    5b7c:	89000017 	ldw	r4,0(r17)
    5b80:	993fdc26 	beq	r19,r4,5af4 <_gp+0xffff7b38>
    5b84:	003fc906 	br	5aac <_gp+0xffff7af0>
    5b88:	00800034 	movhi	r2,0
    5b8c:	10800004 	addi	r2,r2,0
    5b90:	10000f26 	beq	r2,zero,5bd0 <__call_exitprocs+0x160>
    5b94:	99400117 	ldw	r5,4(r19)
    5b98:	99000017 	ldw	r4,0(r19)
    5b9c:	2800091e 	bne	r5,zero,5bc4 <__call_exitprocs+0x154>
    5ba0:	20000826 	beq	r4,zero,5bc4 <__call_exitprocs+0x154>
    5ba4:	89000015 	stw	r4,0(r17)
    5ba8:	a8000226 	beq	r21,zero,5bb4 <__call_exitprocs+0x144>
    5bac:	a809883a 	mov	r4,r21
    5bb0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    5bb4:	9809883a 	mov	r4,r19
    5bb8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    5bbc:	8cc00017 	ldw	r19,0(r17)
    5bc0:	003fbd06 	br	5ab8 <_gp+0xffff7afc>
    5bc4:	9823883a 	mov	r17,r19
    5bc8:	2027883a 	mov	r19,r4
    5bcc:	003fba06 	br	5ab8 <_gp+0xffff7afc>
    5bd0:	dfc00a17 	ldw	ra,40(sp)
    5bd4:	df000917 	ldw	fp,36(sp)
    5bd8:	ddc00817 	ldw	r23,32(sp)
    5bdc:	dd800717 	ldw	r22,28(sp)
    5be0:	dd400617 	ldw	r21,24(sp)
    5be4:	dd000517 	ldw	r20,20(sp)
    5be8:	dcc00417 	ldw	r19,16(sp)
    5bec:	dc800317 	ldw	r18,12(sp)
    5bf0:	dc400217 	ldw	r17,8(sp)
    5bf4:	dc000117 	ldw	r16,4(sp)
    5bf8:	dec00b04 	addi	sp,sp,44
    5bfc:	f800283a 	ret

00005c00 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    5c00:	20000226 	beq	r4,zero,5c0c <_exit+0xc>
    ALT_SIM_FAIL();
    5c04:	002af070 	cmpltui	zero,zero,43969
    5c08:	00000106 	br	5c10 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    5c0c:	002af0b0 	cmpltui	zero,zero,43970
    5c10:	003fff06 	br	5c10 <_gp+0xffff7c54>
